//
// PatchedVideoDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PatchedVideoDetail: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var title: String?
    public var video: String?
    /** Preview thumbnail at 10 percent of video length. */
    public var thumb: String?
    public var thumbSmall: String?
    public var thumbMedium: String?
    public var thumbLarge: String?
    /** Description of the content in the video. */
    public var description: String?
    /** The spoken language in the video. */
    public var language: LanguageEnum?
    public var uploadedBy: UUID?
    /** Name of the person who created the video. */
    public var authorName: String?
    /** Email address of the person who created the video. */
    public var authorEmail: String?
    /** The original date when the video was recorded. */
    public var recordDate: Date?
    /** Where was the video recorded? E.g. \"Bitforge Office, Zeughausstr. 39, 8004 Zurich\" */
    public var location: String?
    /** WGS84: Degree to Equator. 90° for Northpole, -90° for Southpole. */
    public var geoLat: Decimal?
    /** WGS84: 0° for Greenwich Meridian, England. */
    public var geoLng: Decimal?
    /** Arbitrary additional meta data in JSON format. */
    public var metaData: [String: AnyCodable]?
    public var links: [VideoLink]?
    public var tags: String?
    /** Video meta infos extracted by ffmpeg. */
    public var videoMeta: [String: AnyCodable]?
    public var created: Date?
    public var modified: Date?

    public init(id: UUID? = nil, title: String? = nil, video: String? = nil, thumb: String? = nil, thumbSmall: String? = nil, thumbMedium: String? = nil, thumbLarge: String? = nil, description: String? = nil, language: LanguageEnum? = nil, uploadedBy: UUID? = nil, authorName: String? = nil, authorEmail: String? = nil, recordDate: Date? = nil, location: String? = nil, geoLat: Decimal? = nil, geoLng: Decimal? = nil, metaData: [String: AnyCodable]? = nil, links: [VideoLink]? = nil, tags: String? = nil, videoMeta: [String: AnyCodable]? = nil, created: Date? = nil, modified: Date? = nil) {
        self.id = id
        self.title = title
        self.video = video
        self.thumb = thumb
        self.thumbSmall = thumbSmall
        self.thumbMedium = thumbMedium
        self.thumbLarge = thumbLarge
        self.description = description
        self.language = language
        self.uploadedBy = uploadedBy
        self.authorName = authorName
        self.authorEmail = authorEmail
        self.recordDate = recordDate
        self.location = location
        self.geoLat = geoLat
        self.geoLng = geoLng
        self.metaData = metaData
        self.links = links
        self.tags = tags
        self.videoMeta = videoMeta
        self.created = created
        self.modified = modified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case video
        case thumb
        case thumbSmall = "thumb_small"
        case thumbMedium = "thumb_medium"
        case thumbLarge = "thumb_large"
        case description
        case language
        case uploadedBy = "uploaded_by"
        case authorName = "author_name"
        case authorEmail = "author_email"
        case recordDate = "record_date"
        case location
        case geoLat = "geo_lat"
        case geoLng = "geo_lng"
        case metaData = "meta_data"
        case links
        case tags
        case videoMeta = "video_meta"
        case created
        case modified
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(video, forKey: .video)
        try container.encodeIfPresent(thumb, forKey: .thumb)
        try container.encodeIfPresent(thumbSmall, forKey: .thumbSmall)
        try container.encodeIfPresent(thumbMedium, forKey: .thumbMedium)
        try container.encodeIfPresent(thumbLarge, forKey: .thumbLarge)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(uploadedBy, forKey: .uploadedBy)
        try container.encodeIfPresent(authorName, forKey: .authorName)
        try container.encodeIfPresent(authorEmail, forKey: .authorEmail)
        try container.encodeIfPresent(recordDate, forKey: .recordDate)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(geoLat, forKey: .geoLat)
        try container.encodeIfPresent(geoLng, forKey: .geoLng)
        try container.encodeIfPresent(metaData, forKey: .metaData)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(videoMeta, forKey: .videoMeta)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(modified, forKey: .modified)
    }
}

