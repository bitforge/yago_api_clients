//
// VideoList.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct VideoList: Codable, JSONEncodable, Hashable {

    public var id: UUID
    public var title: String
    /** Video File, preferably an .mp4 with H.264 video and AAC audio encoding. */
    public var video: String?
    /** Preview thumbnail at 10 percent of video length. */
    public var thumb: String
    public var thumbSmall: String
    public var thumbMedium: String
    public var thumbLarge: String
    /** Description of the content in the video. */
    public var description: String?
    /** The spoken language in the video. */
    public var language: LanguageEnum?
    /** The user who uploaded the video to CAP. */
    public var uploadedBy: UUID?
    /** Where was the video recorded? E.g. \"Bitforge Office, Zeughausstr. 39, 8004 Zurich\" */
    public var location: String?
    /** WGS84: Degree to Equator. 90° for Northpole, -90° for Southpole. */
    public var geoLat: Decimal?
    /** WGS84: 0° for Greenwich Meridian, England. */
    public var geoLng: Decimal?
    public var created: Date
    public var modified: Date

    public init(id: UUID, title: String, video: String? = nil, thumb: String, thumbSmall: String, thumbMedium: String, thumbLarge: String, description: String? = nil, language: LanguageEnum? = nil, uploadedBy: UUID? = nil, location: String? = nil, geoLat: Decimal? = nil, geoLng: Decimal? = nil, created: Date, modified: Date) {
        self.id = id
        self.title = title
        self.video = video
        self.thumb = thumb
        self.thumbSmall = thumbSmall
        self.thumbMedium = thumbMedium
        self.thumbLarge = thumbLarge
        self.description = description
        self.language = language
        self.uploadedBy = uploadedBy
        self.location = location
        self.geoLat = geoLat
        self.geoLng = geoLng
        self.created = created
        self.modified = modified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case video
        case thumb
        case thumbSmall = "thumb_small"
        case thumbMedium = "thumb_medium"
        case thumbLarge = "thumb_large"
        case description
        case language
        case uploadedBy = "uploaded_by"
        case location
        case geoLat = "geo_lat"
        case geoLng = "geo_lng"
        case created
        case modified
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(title, forKey: .title)
        try container.encodeIfPresent(video, forKey: .video)
        try container.encode(thumb, forKey: .thumb)
        try container.encode(thumbSmall, forKey: .thumbSmall)
        try container.encode(thumbMedium, forKey: .thumbMedium)
        try container.encode(thumbLarge, forKey: .thumbLarge)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(uploadedBy, forKey: .uploadedBy)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(geoLat, forKey: .geoLat)
        try container.encodeIfPresent(geoLng, forKey: .geoLng)
        try container.encode(created, forKey: .created)
        try container.encode(modified, forKey: .modified)
    }
}

