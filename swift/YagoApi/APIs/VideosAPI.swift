//
// VideosAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class VideosAPI {

    /**

     - parameter videoDetail: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func videosCreate(videoDetail: VideoDetail, apiResponseQueue: DispatchQueue = YagoApiAPI.apiResponseQueue, completion: @escaping ((_ data: VideoDetail?, _ error: Error?) -> Void)) -> RequestTask {
        return videosCreateWithRequestBuilder(videoDetail: videoDetail).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/videos/
     - Add a new video. Use generated `id` to upload video in next step.
     - API Key:
       - type: apiKey sessionid 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - parameter videoDetail: (body)  
     - returns: RequestBuilder<VideoDetail> 
     */
    open class func videosCreateWithRequestBuilder(videoDetail: VideoDetail) -> RequestBuilder<VideoDetail> {
        let localVariablePath = "/api/videos/"
        let localVariableURLString = YagoApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: videoDetail)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoDetail>.Type = YagoApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this Video. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func videosDestroy(id: UUID, apiResponseQueue: DispatchQueue = YagoApiAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return videosDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/videos/{id}/
     - Delete a video. Be cautious, this is permanent!
     - API Key:
       - type: apiKey sessionid 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A UUID string identifying this Video. 
     - returns: RequestBuilder<Void> 
     */
    open class func videosDestroyWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/videos/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = YagoApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = YagoApiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func videosList(search: String? = nil, apiResponseQueue: DispatchQueue = YagoApiAPI.apiResponseQueue, completion: @escaping ((_ data: [VideoList]?, _ error: Error?) -> Void)) -> RequestTask {
        return videosListWithRequestBuilder(search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/videos/
     - Lists all videos captured in CAP. Uses short form serialization.
     - API Key:
       - type: apiKey sessionid 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<[VideoList]> 
     */
    open class func videosListWithRequestBuilder(search: String? = nil) -> RequestBuilder<[VideoList]> {
        let localVariablePath = "/api/videos/"
        let localVariableURLString = YagoApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "search": search?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[VideoList]>.Type = YagoApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this Video. 
     - parameter patchedVideoDetail: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func videosPartialUpdate(id: UUID, patchedVideoDetail: PatchedVideoDetail? = nil, apiResponseQueue: DispatchQueue = YagoApiAPI.apiResponseQueue, completion: @escaping ((_ data: VideoDetail?, _ error: Error?) -> Void)) -> RequestTask {
        return videosPartialUpdateWithRequestBuilder(id: id, patchedVideoDetail: patchedVideoDetail).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /api/videos/{id}/
     - Change subset of fields of a video.
     - API Key:
       - type: apiKey sessionid 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A UUID string identifying this Video. 
     - parameter patchedVideoDetail: (body)  (optional)
     - returns: RequestBuilder<VideoDetail> 
     */
    open class func videosPartialUpdateWithRequestBuilder(id: UUID, patchedVideoDetail: PatchedVideoDetail? = nil) -> RequestBuilder<VideoDetail> {
        var localVariablePath = "/api/videos/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = YagoApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedVideoDetail)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoDetail>.Type = YagoApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this Video. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func videosRetrieve(id: UUID, apiResponseQueue: DispatchQueue = YagoApiAPI.apiResponseQueue, completion: @escaping ((_ data: VideoDetail?, _ error: Error?) -> Void)) -> RequestTask {
        return videosRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/videos/{id}/
     - Details of a single video, including format and stream meta data.
     - API Key:
       - type: apiKey sessionid 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A UUID string identifying this Video. 
     - returns: RequestBuilder<VideoDetail> 
     */
    open class func videosRetrieveWithRequestBuilder(id: UUID) -> RequestBuilder<VideoDetail> {
        var localVariablePath = "/api/videos/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = YagoApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoDetail>.Type = YagoApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this Video. 
     - parameter videoDetail: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func videosUpdate(id: UUID, videoDetail: VideoDetail, apiResponseQueue: DispatchQueue = YagoApiAPI.apiResponseQueue, completion: @escaping ((_ data: VideoDetail?, _ error: Error?) -> Void)) -> RequestTask {
        return videosUpdateWithRequestBuilder(id: id, videoDetail: videoDetail).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/videos/{id}/
     - Change all fields of a video.
     - API Key:
       - type: apiKey sessionid 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A UUID string identifying this Video. 
     - parameter videoDetail: (body)  
     - returns: RequestBuilder<VideoDetail> 
     */
    open class func videosUpdateWithRequestBuilder(id: UUID, videoDetail: VideoDetail) -> RequestBuilder<VideoDetail> {
        var localVariablePath = "/api/videos/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = YagoApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: videoDetail)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoDetail>.Type = YagoApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter contentDisposition: (header) The original filename. 
     - parameter id: (path) A UUID identifying this object. 
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func videosUploadUpdate(contentDisposition: String, id: UUID, body: URL? = nil, apiResponseQueue: DispatchQueue = YagoApiAPI.apiResponseQueue, completion: @escaping ((_ data: FileUpload?, _ error: Error?) -> Void)) -> RequestTask {
        return videosUploadUpdateWithRequestBuilder(contentDisposition: contentDisposition, id: id, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/videos/{id}/upload/
     - Upload a video. Filename is required!
     - API Key:
       - type: apiKey sessionid 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - parameter contentDisposition: (header) The original filename. 
     - parameter id: (path) A UUID identifying this object. 
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<FileUpload> 
     */
    open class func videosUploadUpdateWithRequestBuilder(contentDisposition: String, id: UUID, body: URL? = nil) -> RequestBuilder<FileUpload> {
        var localVariablePath = "/api/videos/{id}/upload/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = YagoApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Disposition": contentDisposition.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FileUpload>.Type = YagoApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
