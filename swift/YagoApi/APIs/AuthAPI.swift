//
// AuthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthAPI {

    /**

     - parameter tokenObtainRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authLoginCreate(tokenObtainRequest: TokenObtainRequest, apiResponseQueue: DispatchQueue = YagoApiAPI.apiResponseQueue, completion: @escaping ((_ data: TokenObtainResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return authLoginCreateWithRequestBuilder(tokenObtainRequest: tokenObtainRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/auth/login/
     - Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     - parameter tokenObtainRequest: (body)  
     - returns: RequestBuilder<TokenObtainResponse> 
     */
    open class func authLoginCreateWithRequestBuilder(tokenObtainRequest: TokenObtainRequest) -> RequestBuilder<TokenObtainResponse> {
        let localVariablePath = "/api/auth/login/"
        let localVariableURLString = YagoApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tokenObtainRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenObtainResponse>.Type = YagoApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter passwordResetConfirm: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authPasswordResetConfirmCreate(passwordResetConfirm: PasswordResetConfirm, apiResponseQueue: DispatchQueue = YagoApiAPI.apiResponseQueue, completion: @escaping ((_ data: PasswordResetConfirm?, _ error: Error?) -> Void)) -> RequestTask {
        return authPasswordResetConfirmCreateWithRequestBuilder(passwordResetConfirm: passwordResetConfirm).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/auth/password/reset/confirm/
     - Password reset e-mail link is confirmed, reset the user's password.
     - parameter passwordResetConfirm: (body)  
     - returns: RequestBuilder<PasswordResetConfirm> 
     */
    open class func authPasswordResetConfirmCreateWithRequestBuilder(passwordResetConfirm: PasswordResetConfirm) -> RequestBuilder<PasswordResetConfirm> {
        let localVariablePath = "/api/auth/password/reset/confirm/"
        let localVariableURLString = YagoApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordResetConfirm)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordResetConfirm>.Type = YagoApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter passwordReset: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authPasswordResetCreate(passwordReset: PasswordReset, apiResponseQueue: DispatchQueue = YagoApiAPI.apiResponseQueue, completion: @escaping ((_ data: PasswordReset?, _ error: Error?) -> Void)) -> RequestTask {
        return authPasswordResetCreateWithRequestBuilder(passwordReset: passwordReset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/auth/password/reset/
     - Request password reset. Send an email to the user first.
     - parameter passwordReset: (body)  
     - returns: RequestBuilder<PasswordReset> 
     */
    open class func authPasswordResetCreateWithRequestBuilder(passwordReset: PasswordReset) -> RequestBuilder<PasswordReset> {
        let localVariablePath = "/api/auth/password/reset/"
        let localVariableURLString = YagoApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordReset)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordReset>.Type = YagoApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter tokenRefreshRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authRefreshCreate(tokenRefreshRequest: TokenRefreshRequest, apiResponseQueue: DispatchQueue = YagoApiAPI.apiResponseQueue, completion: @escaping ((_ data: TokenRefreshResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return authRefreshCreateWithRequestBuilder(tokenRefreshRequest: tokenRefreshRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/auth/refresh/
     - Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     - parameter tokenRefreshRequest: (body)  
     - returns: RequestBuilder<TokenRefreshResponse> 
     */
    open class func authRefreshCreateWithRequestBuilder(tokenRefreshRequest: TokenRefreshRequest) -> RequestBuilder<TokenRefreshResponse> {
        let localVariablePath = "/api/auth/refresh/"
        let localVariableURLString = YagoApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tokenRefreshRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenRefreshResponse>.Type = YagoApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter tokenVerifyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authVerifyCreate(tokenVerifyRequest: TokenVerifyRequest, apiResponseQueue: DispatchQueue = YagoApiAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authVerifyCreateWithRequestBuilder(tokenVerifyRequest: tokenVerifyRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/auth/verify/
     - Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     - parameter tokenVerifyRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func authVerifyCreateWithRequestBuilder(tokenVerifyRequest: TokenVerifyRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/auth/verify/"
        let localVariableURLString = YagoApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tokenVerifyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = YagoApiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
