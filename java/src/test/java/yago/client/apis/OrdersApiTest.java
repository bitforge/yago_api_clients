/*
 * Yago API
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package yago.client.apis;

import yago.client.ApiException;
import yago.client.models.AvailableState;
import yago.client.models.ErrorDescription;
import java.io.File;
import yago.client.models.FileUploaded;
import yago.client.models.Order;
import yago.client.models.OrderComment;
import yago.client.models.OrderCommentCreate;
import yago.client.models.OrderCreate;
import yago.client.models.OrderDetail;
import yago.client.models.OrderModel;
import yago.client.models.OrderModelComment;
import yago.client.models.OrderModelCommentCreate;
import yago.client.models.OrderModelCreate;
import yago.client.models.OrderModelDetail;
import yago.client.models.OrderModelFile;
import yago.client.models.OrderUpdate;
import yago.client.models.StateChanged;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrdersApi
 */
@Ignore
public class OrdersApiTest {

    private final OrdersApi api = new OrdersApi();

    
    /**
     * 
     *
     * Add a new comment to order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersCommentsCreateTest() throws ApiException {
        Integer orderId = null;
        OrderCommentCreate orderCommentCreate = null;
                OrderCommentCreate response = api.ordersCommentsCreate(orderId, orderCommentCreate);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all comments of order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersCommentsListTest() throws ApiException {
        Integer orderId = null;
                List<OrderComment> response = api.ordersCommentsList(orderId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a new order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersCreateTest() throws ApiException {
        OrderCreate orderCreate = null;
                Order response = api.ordersCreate(orderCreate);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersDestroyTest() throws ApiException {
        Integer id = null;
                api.ordersDestroy(id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all orders of customer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersListTest() throws ApiException {
        UUID project = null;
                List<Order> response = api.ordersList(project);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a new comment to order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersModelsCommentsCreateTest() throws ApiException {
        Integer orderId = null;
        Integer id = null;
        OrderModelCommentCreate orderModelCommentCreate = null;
                OrderModelCommentCreate response = api.ordersModelsCommentsCreate(orderId, id, orderModelCommentCreate);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all comments of model.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersModelsCommentsListTest() throws ApiException {
        Integer orderId = null;
        Integer id = null;
                List<OrderModelComment> response = api.ordersModelsCommentsList(orderId, id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a new model.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersModelsCreateTest() throws ApiException {
        Integer orderId = null;
        OrderModelCreate orderModelCreate = null;
                OrderModel response = api.ordersModelsCreate(orderId, orderModelCreate);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete model.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersModelsDestroyTest() throws ApiException {
        Integer orderId = null;
        Integer id = null;
                api.ordersModelsDestroy(orderId, id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersModelsFilesDestroyTest() throws ApiException {
        Integer orderId = null;
        Integer id = null;
        UUID fileId = null;
                api.ordersModelsFilesDestroy(orderId, id, fileId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all files of model.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersModelsFilesListTest() throws ApiException {
        Integer orderId = null;
        Integer id = null;
                List<OrderModelFile> response = api.ordersModelsFilesList(orderId, id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Upload a file. Max size 30MB. Filename is required!
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersModelsFilesUpdateTest() throws ApiException {
        Integer orderId = null;
        String contentDisposition = null;
        Integer id = null;
        File body = null;
                FileUploaded response = api.ordersModelsFilesUpdate(orderId, contentDisposition, id, body);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all models of order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersModelsListTest() throws ApiException {
        Integer orderId = null;
                List<OrderModel> response = api.ordersModelsList(orderId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * &#x60;ModelOrder&#x60; CRUD Viewset.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersModelsRetrieveTest() throws ApiException {
        Integer orderId = null;
        Integer id = null;
                OrderModelDetail response = api.ordersModelsRetrieve(orderId, id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Model was accepted by customer and can be added to project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersModelsSubmitToFinishedPartialUpdateTest() throws ApiException {
        Integer orderId = null;
        Integer id = null;
                StateChanged response = api.ordersModelsSubmitToFinishedPartialUpdate(orderId, id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Model is ready to be reviewed by customer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersModelsSubmitToReviewPartialUpdateTest() throws ApiException {
        Integer orderId = null;
        Integer id = null;
                StateChanged response = api.ordersModelsSubmitToReviewPartialUpdate(orderId, id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Request rework of model, as specified in comments. Can only happen once.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersModelsSubmitToReworkPartialUpdateTest() throws ApiException {
        Integer orderId = null;
        Integer id = null;
                StateChanged response = api.ordersModelsSubmitToReworkPartialUpdate(orderId, id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists available transitions of order model for current user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersModelsTransitionsListTest() throws ApiException {
        Integer orderId = null;
        Integer id = null;
                List<AvailableState> response = api.ordersModelsTransitionsList(orderId, id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Change model.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersModelsUpdateTest() throws ApiException {
        Integer orderId = null;
        Integer id = null;
        OrderModel orderModel = null;
                OrderModel response = api.ordersModelsUpdate(orderId, id, orderModel);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Details of a single order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersRetrieveTest() throws ApiException {
        Integer id = null;
                OrderDetail response = api.ordersRetrieve(id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Send order to estimation after all models have been added and specified.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersSubmitToEstimationPartialUpdateTest() throws ApiException {
        Integer orderId = null;
                StateChanged response = api.ordersSubmitToEstimationPartialUpdate(orderId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * All models are reviewed &amp; accepted by customer, order is complete.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersSubmitToFinishedPartialUpdateTest() throws ApiException {
        Integer orderId = null;
                StateChanged response = api.ordersSubmitToFinishedPartialUpdate(orderId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Models have been estimated and and payment price for customer is defined.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersSubmitToPaymentPartialUpdateTest() throws ApiException {
        Integer orderId = null;
                StateChanged response = api.ordersSubmitToPaymentPartialUpdate(orderId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Customer has payed estimated amount and modelling can begin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersSubmitToProgressPartialUpdateTest() throws ApiException {
        Integer orderId = null;
                StateChanged response = api.ordersSubmitToProgressPartialUpdate(orderId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * All models are uploaded and ready, customer may begin with review.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersSubmitToReviewPartialUpdateTest() throws ApiException {
        Integer orderId = null;
                StateChanged response = api.ordersSubmitToReviewPartialUpdate(orderId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists available transitions of order for current user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersTransitionsListTest() throws ApiException {
        Integer orderId = null;
                List<AvailableState> response = api.ordersTransitionsList(orderId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update order price estimation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersUpdateTest() throws ApiException {
        Integer id = null;
        OrderUpdate orderUpdate = null;
                OrderUpdate response = api.ordersUpdate(id, orderUpdate);
        // TODO: test validations
    }
    
}
