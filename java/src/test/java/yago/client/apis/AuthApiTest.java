/*
 * Genie API
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package yago.client.apis;

import yago.client.ApiException;
import yago.client.models.GoogleIdToken;
import yago.client.models.PasswordReset;
import yago.client.models.PasswordResetConfirm;
import yago.client.models.TokenObtainRequest;
import yago.client.models.TokenObtainResponse;
import yago.client.models.TokenRefreshRequest;
import yago.client.models.TokenRefreshResponse;
import yago.client.models.TokenVerify;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Ignore
public class AuthApiTest {

    private final AuthApi api = new AuthApi();

    
    /**
     * 
     *
     * Takes a Google ID token and returns an access and refresh token for this API. If token is valid and user does not already exist, a new Genie user will be created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authGoogleCreateTest() throws ApiException {
        GoogleIdToken googleIdToken = null;
                TokenObtainResponse response = api.authGoogleCreate(googleIdToken);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authLoginCreateTest() throws ApiException {
        TokenObtainRequest tokenObtainRequest = null;
                TokenObtainResponse response = api.authLoginCreate(tokenObtainRequest);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Password reset e-mail link is confirmed, reset the user&#39;s password.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authPasswordResetConfirmCreateTest() throws ApiException {
        PasswordResetConfirm passwordResetConfirm = null;
                PasswordResetConfirm response = api.authPasswordResetConfirmCreate(passwordResetConfirm);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Request password reset. Send an email to the user first.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authPasswordResetCreateTest() throws ApiException {
        PasswordReset passwordReset = null;
                PasswordReset response = api.authPasswordResetCreate(passwordReset);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authRefreshCreateTest() throws ApiException {
        TokenRefreshRequest tokenRefreshRequest = null;
                TokenRefreshResponse response = api.authRefreshCreate(tokenRefreshRequest);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Takes a token and indicates if it is valid.  This view provides no information about a token&#39;s fitness for a particular use.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authVerifyCreateTest() throws ApiException {
        TokenVerify tokenVerify = null;
                api.authVerifyCreate(tokenVerify);
        // TODO: test validations
    }
    
}
