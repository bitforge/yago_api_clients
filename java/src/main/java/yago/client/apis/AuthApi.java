/*
 * Genie API
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package yago.client.apis;

import yago.client.ApiCallback;
import yago.client.ApiClient;
import yago.client.ApiException;
import yago.client.ApiResponse;
import yago.client.Configuration;
import yago.client.Pair;
import yago.client.ProgressRequestBody;
import yago.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import yago.client.models.GoogleIdToken;
import yago.client.models.PasswordReset;
import yago.client.models.PasswordResetConfirm;
import yago.client.models.TokenObtainRequest;
import yago.client.models.TokenObtainResponse;
import yago.client.models.TokenRefreshRequest;
import yago.client.models.TokenRefreshResponse;
import yago.client.models.TokenVerify;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authGoogleCreate
     * @param googleIdToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authGoogleCreateCall(GoogleIdToken googleIdToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = googleIdToken;

        // create path and map variables
        String localVarPath = "/api/auth/google/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authGoogleCreateValidateBeforeCall(GoogleIdToken googleIdToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'googleIdToken' is set
        if (googleIdToken == null) {
            throw new ApiException("Missing the required parameter 'googleIdToken' when calling authGoogleCreate(Async)");
        }
        

        okhttp3.Call localVarCall = authGoogleCreateCall(googleIdToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * Takes a Google ID token and returns an access and refresh token for this API. If token is valid and user does not already exist, a new Genie user will be created.
     * @param googleIdToken  (required)
     * @return TokenObtainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TokenObtainResponse authGoogleCreate(GoogleIdToken googleIdToken) throws ApiException {
        ApiResponse<TokenObtainResponse> localVarResp = authGoogleCreateWithHttpInfo(googleIdToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Takes a Google ID token and returns an access and refresh token for this API. If token is valid and user does not already exist, a new Genie user will be created.
     * @param googleIdToken  (required)
     * @return ApiResponse&lt;TokenObtainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenObtainResponse> authGoogleCreateWithHttpInfo(GoogleIdToken googleIdToken) throws ApiException {
        okhttp3.Call localVarCall = authGoogleCreateValidateBeforeCall(googleIdToken, null);
        Type localVarReturnType = new TypeToken<TokenObtainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Takes a Google ID token and returns an access and refresh token for this API. If token is valid and user does not already exist, a new Genie user will be created.
     * @param googleIdToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authGoogleCreateAsync(GoogleIdToken googleIdToken, final ApiCallback<TokenObtainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authGoogleCreateValidateBeforeCall(googleIdToken, _callback);
        Type localVarReturnType = new TypeToken<TokenObtainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authLoginCreate
     * @param tokenObtainRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authLoginCreateCall(TokenObtainRequest tokenObtainRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenObtainRequest;

        // create path and map variables
        String localVarPath = "/api/auth/login/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authLoginCreateValidateBeforeCall(TokenObtainRequest tokenObtainRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tokenObtainRequest' is set
        if (tokenObtainRequest == null) {
            throw new ApiException("Missing the required parameter 'tokenObtainRequest' when calling authLoginCreate(Async)");
        }
        

        okhttp3.Call localVarCall = authLoginCreateCall(tokenObtainRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param tokenObtainRequest  (required)
     * @return TokenObtainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TokenObtainResponse authLoginCreate(TokenObtainRequest tokenObtainRequest) throws ApiException {
        ApiResponse<TokenObtainResponse> localVarResp = authLoginCreateWithHttpInfo(tokenObtainRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param tokenObtainRequest  (required)
     * @return ApiResponse&lt;TokenObtainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenObtainResponse> authLoginCreateWithHttpInfo(TokenObtainRequest tokenObtainRequest) throws ApiException {
        okhttp3.Call localVarCall = authLoginCreateValidateBeforeCall(tokenObtainRequest, null);
        Type localVarReturnType = new TypeToken<TokenObtainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param tokenObtainRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authLoginCreateAsync(TokenObtainRequest tokenObtainRequest, final ApiCallback<TokenObtainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authLoginCreateValidateBeforeCall(tokenObtainRequest, _callback);
        Type localVarReturnType = new TypeToken<TokenObtainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authPasswordResetConfirmCreate
     * @param passwordResetConfirm  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authPasswordResetConfirmCreateCall(PasswordResetConfirm passwordResetConfirm, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordResetConfirm;

        // create path and map variables
        String localVarPath = "/api/auth/password/reset/confirm/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authPasswordResetConfirmCreateValidateBeforeCall(PasswordResetConfirm passwordResetConfirm, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'passwordResetConfirm' is set
        if (passwordResetConfirm == null) {
            throw new ApiException("Missing the required parameter 'passwordResetConfirm' when calling authPasswordResetConfirmCreate(Async)");
        }
        

        okhttp3.Call localVarCall = authPasswordResetConfirmCreateCall(passwordResetConfirm, _callback);
        return localVarCall;

    }

    /**
     * 
     * Password reset e-mail link is confirmed, reset the user&#39;s password.
     * @param passwordResetConfirm  (required)
     * @return PasswordResetConfirm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordResetConfirm authPasswordResetConfirmCreate(PasswordResetConfirm passwordResetConfirm) throws ApiException {
        ApiResponse<PasswordResetConfirm> localVarResp = authPasswordResetConfirmCreateWithHttpInfo(passwordResetConfirm);
        return localVarResp.getData();
    }

    /**
     * 
     * Password reset e-mail link is confirmed, reset the user&#39;s password.
     * @param passwordResetConfirm  (required)
     * @return ApiResponse&lt;PasswordResetConfirm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordResetConfirm> authPasswordResetConfirmCreateWithHttpInfo(PasswordResetConfirm passwordResetConfirm) throws ApiException {
        okhttp3.Call localVarCall = authPasswordResetConfirmCreateValidateBeforeCall(passwordResetConfirm, null);
        Type localVarReturnType = new TypeToken<PasswordResetConfirm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Password reset e-mail link is confirmed, reset the user&#39;s password.
     * @param passwordResetConfirm  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authPasswordResetConfirmCreateAsync(PasswordResetConfirm passwordResetConfirm, final ApiCallback<PasswordResetConfirm> _callback) throws ApiException {

        okhttp3.Call localVarCall = authPasswordResetConfirmCreateValidateBeforeCall(passwordResetConfirm, _callback);
        Type localVarReturnType = new TypeToken<PasswordResetConfirm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authPasswordResetCreate
     * @param passwordReset  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authPasswordResetCreateCall(PasswordReset passwordReset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordReset;

        // create path and map variables
        String localVarPath = "/api/auth/password/reset/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authPasswordResetCreateValidateBeforeCall(PasswordReset passwordReset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'passwordReset' is set
        if (passwordReset == null) {
            throw new ApiException("Missing the required parameter 'passwordReset' when calling authPasswordResetCreate(Async)");
        }
        

        okhttp3.Call localVarCall = authPasswordResetCreateCall(passwordReset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Request password reset. Send an email to the user first.
     * @param passwordReset  (required)
     * @return PasswordReset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordReset authPasswordResetCreate(PasswordReset passwordReset) throws ApiException {
        ApiResponse<PasswordReset> localVarResp = authPasswordResetCreateWithHttpInfo(passwordReset);
        return localVarResp.getData();
    }

    /**
     * 
     * Request password reset. Send an email to the user first.
     * @param passwordReset  (required)
     * @return ApiResponse&lt;PasswordReset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordReset> authPasswordResetCreateWithHttpInfo(PasswordReset passwordReset) throws ApiException {
        okhttp3.Call localVarCall = authPasswordResetCreateValidateBeforeCall(passwordReset, null);
        Type localVarReturnType = new TypeToken<PasswordReset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Request password reset. Send an email to the user first.
     * @param passwordReset  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authPasswordResetCreateAsync(PasswordReset passwordReset, final ApiCallback<PasswordReset> _callback) throws ApiException {

        okhttp3.Call localVarCall = authPasswordResetCreateValidateBeforeCall(passwordReset, _callback);
        Type localVarReturnType = new TypeToken<PasswordReset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authRefreshCreate
     * @param tokenRefreshRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authRefreshCreateCall(TokenRefreshRequest tokenRefreshRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenRefreshRequest;

        // create path and map variables
        String localVarPath = "/api/auth/refresh/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authRefreshCreateValidateBeforeCall(TokenRefreshRequest tokenRefreshRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tokenRefreshRequest' is set
        if (tokenRefreshRequest == null) {
            throw new ApiException("Missing the required parameter 'tokenRefreshRequest' when calling authRefreshCreate(Async)");
        }
        

        okhttp3.Call localVarCall = authRefreshCreateCall(tokenRefreshRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param tokenRefreshRequest  (required)
     * @return TokenRefreshResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TokenRefreshResponse authRefreshCreate(TokenRefreshRequest tokenRefreshRequest) throws ApiException {
        ApiResponse<TokenRefreshResponse> localVarResp = authRefreshCreateWithHttpInfo(tokenRefreshRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param tokenRefreshRequest  (required)
     * @return ApiResponse&lt;TokenRefreshResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenRefreshResponse> authRefreshCreateWithHttpInfo(TokenRefreshRequest tokenRefreshRequest) throws ApiException {
        okhttp3.Call localVarCall = authRefreshCreateValidateBeforeCall(tokenRefreshRequest, null);
        Type localVarReturnType = new TypeToken<TokenRefreshResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param tokenRefreshRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authRefreshCreateAsync(TokenRefreshRequest tokenRefreshRequest, final ApiCallback<TokenRefreshResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authRefreshCreateValidateBeforeCall(tokenRefreshRequest, _callback);
        Type localVarReturnType = new TypeToken<TokenRefreshResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authVerifyCreate
     * @param tokenVerify  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authVerifyCreateCall(TokenVerify tokenVerify, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenVerify;

        // create path and map variables
        String localVarPath = "/api/auth/verify/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authVerifyCreateValidateBeforeCall(TokenVerify tokenVerify, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tokenVerify' is set
        if (tokenVerify == null) {
            throw new ApiException("Missing the required parameter 'tokenVerify' when calling authVerifyCreate(Async)");
        }
        

        okhttp3.Call localVarCall = authVerifyCreateCall(tokenVerify, _callback);
        return localVarCall;

    }

    /**
     * 
     * Takes a token and indicates if it is valid.  This view provides no information about a token&#39;s fitness for a particular use.
     * @param tokenVerify  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void authVerifyCreate(TokenVerify tokenVerify) throws ApiException {
        authVerifyCreateWithHttpInfo(tokenVerify);
    }

    /**
     * 
     * Takes a token and indicates if it is valid.  This view provides no information about a token&#39;s fitness for a particular use.
     * @param tokenVerify  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authVerifyCreateWithHttpInfo(TokenVerify tokenVerify) throws ApiException {
        okhttp3.Call localVarCall = authVerifyCreateValidateBeforeCall(tokenVerify, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Takes a token and indicates if it is valid.  This view provides no information about a token&#39;s fitness for a particular use.
     * @param tokenVerify  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authVerifyCreateAsync(TokenVerify tokenVerify, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authVerifyCreateValidateBeforeCall(tokenVerify, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
