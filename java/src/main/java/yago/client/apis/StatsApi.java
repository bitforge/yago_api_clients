/*
 * Genie API
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package yago.client.apis;

import yago.client.ApiCallback;
import yago.client.ApiClient;
import yago.client.ApiException;
import yago.client.ApiResponse;
import yago.client.Configuration;
import yago.client.Pair;
import yago.client.ProgressRequestBody;
import yago.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import yago.client.models.ChronicStats;
import yago.client.models.GlobalStatistics;
import yago.client.models.ProjectsStatistics;
import yago.client.models.SummaryStats;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for statsGlobalCreate
     * @param globalStatistics  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statsGlobalCreateCall(GlobalStatistics globalStatistics, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = globalStatistics;

        // create path and map variables
        String localVarPath = "/api/stats/global/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statsGlobalCreateValidateBeforeCall(GlobalStatistics globalStatistics, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'globalStatistics' is set
        if (globalStatistics == null) {
            throw new ApiException("Missing the required parameter 'globalStatistics' when calling statsGlobalCreate(Async)");
        }
        

        okhttp3.Call localVarCall = statsGlobalCreateCall(globalStatistics, _callback);
        return localVarCall;

    }

    /**
     * 
     * Traffic analytics over all projects and models.
     * @param globalStatistics  (required)
     * @return SummaryStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SummaryStats statsGlobalCreate(GlobalStatistics globalStatistics) throws ApiException {
        ApiResponse<SummaryStats> localVarResp = statsGlobalCreateWithHttpInfo(globalStatistics);
        return localVarResp.getData();
    }

    /**
     * 
     * Traffic analytics over all projects and models.
     * @param globalStatistics  (required)
     * @return ApiResponse&lt;SummaryStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SummaryStats> statsGlobalCreateWithHttpInfo(GlobalStatistics globalStatistics) throws ApiException {
        okhttp3.Call localVarCall = statsGlobalCreateValidateBeforeCall(globalStatistics, null);
        Type localVarReturnType = new TypeToken<SummaryStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Traffic analytics over all projects and models.
     * @param globalStatistics  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statsGlobalCreateAsync(GlobalStatistics globalStatistics, final ApiCallback<SummaryStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = statsGlobalCreateValidateBeforeCall(globalStatistics, _callback);
        Type localVarReturnType = new TypeToken<SummaryStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for statsProjectCreate
     * @param id  (required)
     * @param projectsStatistics  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statsProjectCreateCall(UUID id, ProjectsStatistics projectsStatistics, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsStatistics;

        // create path and map variables
        String localVarPath = "/api/stats/project/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statsProjectCreateValidateBeforeCall(UUID id, ProjectsStatistics projectsStatistics, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling statsProjectCreate(Async)");
        }
        
        // verify the required parameter 'projectsStatistics' is set
        if (projectsStatistics == null) {
            throw new ApiException("Missing the required parameter 'projectsStatistics' when calling statsProjectCreate(Async)");
        }
        

        okhttp3.Call localVarCall = statsProjectCreateCall(id, projectsStatistics, _callback);
        return localVarCall;

    }

    /**
     * 
     * Traffic for single project and all models of that project. Raises 404 if the user is not allowed to view data of this project.
     * @param id  (required)
     * @param projectsStatistics  (required)
     * @return SummaryStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SummaryStats statsProjectCreate(UUID id, ProjectsStatistics projectsStatistics) throws ApiException {
        ApiResponse<SummaryStats> localVarResp = statsProjectCreateWithHttpInfo(id, projectsStatistics);
        return localVarResp.getData();
    }

    /**
     * 
     * Traffic for single project and all models of that project. Raises 404 if the user is not allowed to view data of this project.
     * @param id  (required)
     * @param projectsStatistics  (required)
     * @return ApiResponse&lt;SummaryStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SummaryStats> statsProjectCreateWithHttpInfo(UUID id, ProjectsStatistics projectsStatistics) throws ApiException {
        okhttp3.Call localVarCall = statsProjectCreateValidateBeforeCall(id, projectsStatistics, null);
        Type localVarReturnType = new TypeToken<SummaryStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Traffic for single project and all models of that project. Raises 404 if the user is not allowed to view data of this project.
     * @param id  (required)
     * @param projectsStatistics  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statsProjectCreateAsync(UUID id, ProjectsStatistics projectsStatistics, final ApiCallback<SummaryStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = statsProjectCreateValidateBeforeCall(id, projectsStatistics, _callback);
        Type localVarReturnType = new TypeToken<SummaryStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
