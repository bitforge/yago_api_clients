/*
 * Genie API
 *
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Genie.Api.Client.OpenAPIDateConverter;

namespace Genie.Api.Model
{
    /// <summary>
    /// TokenObtainResponse
    /// </summary>
    [DataContract(Name = "TokenObtainResponse")]
    public partial class TokenObtainResponse : IEquatable<TokenObtainResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenObtainResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenObtainResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenObtainResponse" /> class.
        /// </summary>
        /// <param name="access">access (required).</param>
        /// <param name="refresh">refresh (required).</param>
        public TokenObtainResponse(string access = default(string), string refresh = default(string))
        {
            // to ensure "access" is required (not null)
            if (access == null) {
                throw new ArgumentNullException("access is a required property for TokenObtainResponse and cannot be null");
            }
            this.Access = access;
            // to ensure "refresh" is required (not null)
            if (refresh == null) {
                throw new ArgumentNullException("refresh is a required property for TokenObtainResponse and cannot be null");
            }
            this.Refresh = refresh;
        }

        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [DataMember(Name = "access", IsRequired = true, EmitDefaultValue = false)]
        public string Access { get; set; }

        /// <summary>
        /// Gets or Sets Refresh
        /// </summary>
        [DataMember(Name = "refresh", IsRequired = true, EmitDefaultValue = false)]
        public string Refresh { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenObtainResponse {\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  Refresh: ").Append(Refresh).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenObtainResponse);
        }

        /// <summary>
        /// Returns true if TokenObtainResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenObtainResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenObtainResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Access == input.Access ||
                    (this.Access != null &&
                    this.Access.Equals(input.Access))
                ) && 
                (
                    this.Refresh == input.Refresh ||
                    (this.Refresh != null &&
                    this.Refresh.Equals(input.Refresh))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Access != null)
                    hashCode = hashCode * 59 + this.Access.GetHashCode();
                if (this.Refresh != null)
                    hashCode = hashCode * 59 + this.Refresh.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
