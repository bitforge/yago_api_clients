/*
 * Genie API
 *
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Genie.Api.Client.OpenAPIDateConverter;

namespace Genie.Api.Model
{
    /// <summary>
    /// SummaryStats
    /// </summary>
    [DataContract(Name = "SummaryStats")]
    public partial class SummaryStats : IEquatable<SummaryStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryStats" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SummaryStats() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryStats" /> class.
        /// </summary>
        /// <param name="labels">labels (required).</param>
        /// <param name="datasets">datasets (required).</param>
        public SummaryStats(List<Object> labels = default(List<Object>), Dictionary<string, Object> datasets = default(Dictionary<string, Object>))
        {
            // to ensure "labels" is required (not null)
            if (labels == null) {
                throw new ArgumentNullException("labels is a required property for SummaryStats and cannot be null");
            }
            this.Labels = labels;
            // to ensure "datasets" is required (not null)
            if (datasets == null) {
                throw new ArgumentNullException("datasets is a required property for SummaryStats and cannot be null");
            }
            this.Datasets = datasets;
        }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "labels", IsRequired = true, EmitDefaultValue = false)]
        public List<Object> Labels { get; set; }

        /// <summary>
        /// Gets or Sets Datasets
        /// </summary>
        [DataMember(Name = "datasets", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, Object> Datasets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummaryStats {\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Datasets: ").Append(Datasets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SummaryStats);
        }

        /// <summary>
        /// Returns true if SummaryStats instances are equal
        /// </summary>
        /// <param name="input">Instance of SummaryStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummaryStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    input.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.Datasets == input.Datasets ||
                    this.Datasets != null &&
                    input.Datasets != null &&
                    this.Datasets.SequenceEqual(input.Datasets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Labels != null)
                    hashCode = hashCode * 59 + this.Labels.GetHashCode();
                if (this.Datasets != null)
                    hashCode = hashCode * 59 + this.Datasets.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
