/*
 * Genie API
 *
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Genie.Api.Client.OpenAPIDateConverter;

namespace Genie.Api.Model
{
    /// <summary>
    /// Customer
    /// </summary>
    [DataContract(Name = "Customer")]
    public partial class Customer : IEquatable<Customer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Customer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        /// <param name="name">Name will be visible as title in gallery. (required).</param>
        /// <param name="plan">Defines the number of available models and AR views. &lt;a href&#x3D;\&quot;mailto:info@bitforge.ch\&quot;&gt;Contact us&lt;/a&gt; to upgrade your plan..</param>
        /// <param name="slug">Only for internal use (required).</param>
        /// <param name="image">Image will be visible in gallery..</param>
        /// <param name="website">website.</param>
        /// <param name="description">description.</param>
        /// <param name="contactAddress">contactAddress.</param>
        /// <param name="billingAddress">billingAddress.</param>
        public Customer(string name = default(string), string plan = default(string), string slug = default(string), string image = default(string), string website = default(string), string description = default(string), Guid? contactAddress = default(Guid?), Guid? billingAddress = default(Guid?))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for Customer and cannot be null");
            }
            this.Name = name;
            // to ensure "slug" is required (not null)
            if (slug == null) {
                throw new ArgumentNullException("slug is a required property for Customer and cannot be null");
            }
            this.Slug = slug;
            this.Plan = plan;
            this.Image = image;
            this.Website = website;
            this.Description = description;
            this.ContactAddress = contactAddress;
            this.BillingAddress = billingAddress;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Name will be visible as title in gallery.
        /// </summary>
        /// <value>Name will be visible as title in gallery.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Defines the number of available models and AR views. &lt;a href&#x3D;\&quot;mailto:info@bitforge.ch\&quot;&gt;Contact us&lt;/a&gt; to upgrade your plan.
        /// </summary>
        /// <value>Defines the number of available models and AR views. &lt;a href&#x3D;\&quot;mailto:info@bitforge.ch\&quot;&gt;Contact us&lt;/a&gt; to upgrade your plan.</value>
        [DataMember(Name = "plan", EmitDefaultValue = true)]
        public string Plan { get; set; }

        /// <summary>
        /// Only for internal use
        /// </summary>
        /// <value>Only for internal use</value>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = false)]
        public string Slug { get; set; }

        /// <summary>
        /// Image will be visible in gallery.
        /// </summary>
        /// <value>Image will be visible in gallery.</value>
        [DataMember(Name = "image", EmitDefaultValue = true)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets ImageThumb
        /// </summary>
        [DataMember(Name = "image_thumb", IsRequired = true, EmitDefaultValue = false)]
        public string ImageThumb { get; private set; }

        /// <summary>
        /// Returns false as ImageThumb should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeImageThumb()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ImagePreview
        /// </summary>
        [DataMember(Name = "image_preview", IsRequired = true, EmitDefaultValue = false)]
        public string ImagePreview { get; private set; }

        /// <summary>
        /// Returns false as ImagePreview should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeImagePreview()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name = "website", EmitDefaultValue = true)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ContactAddress
        /// </summary>
        [DataMember(Name = "contact_address", EmitDefaultValue = true)]
        public Guid? ContactAddress { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name = "billing_address", EmitDefaultValue = true)]
        public Guid? BillingAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  ImageThumb: ").Append(ImageThumb).Append("\n");
            sb.Append("  ImagePreview: ").Append(ImagePreview).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ContactAddress: ").Append(ContactAddress).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Customer);
        }

        /// <summary>
        /// Returns true if Customer instances are equal
        /// </summary>
        /// <param name="input">Instance of Customer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Customer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Plan == input.Plan ||
                    (this.Plan != null &&
                    this.Plan.Equals(input.Plan))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.ImageThumb == input.ImageThumb ||
                    (this.ImageThumb != null &&
                    this.ImageThumb.Equals(input.ImageThumb))
                ) && 
                (
                    this.ImagePreview == input.ImagePreview ||
                    (this.ImagePreview != null &&
                    this.ImagePreview.Equals(input.ImagePreview))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ContactAddress == input.ContactAddress ||
                    (this.ContactAddress != null &&
                    this.ContactAddress.Equals(input.ContactAddress))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Plan != null)
                    hashCode = hashCode * 59 + this.Plan.GetHashCode();
                if (this.Slug != null)
                    hashCode = hashCode * 59 + this.Slug.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.ImageThumb != null)
                    hashCode = hashCode * 59 + this.ImageThumb.GetHashCode();
                if (this.ImagePreview != null)
                    hashCode = hashCode * 59 + this.ImagePreview.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ContactAddress != null)
                    hashCode = hashCode * 59 + this.ContactAddress.GetHashCode();
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

            // Slug (string) maxLength
            if(this.Slug != null && this.Slug.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Slug, length must be less than 50.", new [] { "Slug" });
            }

            // Slug (string) pattern
            Regex regexSlug = new Regex(@"^[-a-zA-Z0-9_]+$", RegexOptions.CultureInvariant);
            if (false == regexSlug.Match(this.Slug).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Slug, must match a pattern of " + regexSlug, new [] { "Slug" });
            }

            // Website (string) maxLength
            if(this.Website != null && this.Website.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Website, length must be less than 200.", new [] { "Website" });
            }

            yield break;
        }
    }

}
