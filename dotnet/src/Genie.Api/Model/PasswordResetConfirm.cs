/*
 * Genie API
 *
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Genie.Api.Client.OpenAPIDateConverter;

namespace Genie.Api.Model
{
    /// <summary>
    /// Serializer for confirming a password reset attempt.
    /// </summary>
    [DataContract(Name = "PasswordResetConfirm")]
    public partial class PasswordResetConfirm : IEquatable<PasswordResetConfirm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordResetConfirm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PasswordResetConfirm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordResetConfirm" /> class.
        /// </summary>
        /// <param name="newPassword1">newPassword1 (required).</param>
        /// <param name="newPassword2">newPassword2 (required).</param>
        /// <param name="uid">uid (required).</param>
        /// <param name="token">token (required).</param>
        public PasswordResetConfirm(string newPassword1 = default(string), string newPassword2 = default(string), string uid = default(string), string token = default(string))
        {
            // to ensure "newPassword1" is required (not null)
            if (newPassword1 == null) {
                throw new ArgumentNullException("newPassword1 is a required property for PasswordResetConfirm and cannot be null");
            }
            this.NewPassword1 = newPassword1;
            // to ensure "newPassword2" is required (not null)
            if (newPassword2 == null) {
                throw new ArgumentNullException("newPassword2 is a required property for PasswordResetConfirm and cannot be null");
            }
            this.NewPassword2 = newPassword2;
            // to ensure "uid" is required (not null)
            if (uid == null) {
                throw new ArgumentNullException("uid is a required property for PasswordResetConfirm and cannot be null");
            }
            this.Uid = uid;
            // to ensure "token" is required (not null)
            if (token == null) {
                throw new ArgumentNullException("token is a required property for PasswordResetConfirm and cannot be null");
            }
            this.Token = token;
        }

        /// <summary>
        /// Gets or Sets NewPassword1
        /// </summary>
        [DataMember(Name = "new_password1", IsRequired = true, EmitDefaultValue = false)]
        public string NewPassword1 { get; set; }

        /// <summary>
        /// Gets or Sets NewPassword2
        /// </summary>
        [DataMember(Name = "new_password2", IsRequired = true, EmitDefaultValue = false)]
        public string NewPassword2 { get; set; }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name = "uid", IsRequired = true, EmitDefaultValue = false)]
        public string Uid { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", IsRequired = true, EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PasswordResetConfirm {\n");
            sb.Append("  NewPassword1: ").Append(NewPassword1).Append("\n");
            sb.Append("  NewPassword2: ").Append(NewPassword2).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PasswordResetConfirm);
        }

        /// <summary>
        /// Returns true if PasswordResetConfirm instances are equal
        /// </summary>
        /// <param name="input">Instance of PasswordResetConfirm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordResetConfirm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NewPassword1 == input.NewPassword1 ||
                    (this.NewPassword1 != null &&
                    this.NewPassword1.Equals(input.NewPassword1))
                ) && 
                (
                    this.NewPassword2 == input.NewPassword2 ||
                    (this.NewPassword2 != null &&
                    this.NewPassword2.Equals(input.NewPassword2))
                ) && 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NewPassword1 != null)
                    hashCode = hashCode * 59 + this.NewPassword1.GetHashCode();
                if (this.NewPassword2 != null)
                    hashCode = hashCode * 59 + this.NewPassword2.GetHashCode();
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // NewPassword1 (string) maxLength
            if(this.NewPassword1 != null && this.NewPassword1.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NewPassword1, length must be less than 128.", new [] { "NewPassword1" });
            }

            // NewPassword2 (string) maxLength
            if(this.NewPassword2 != null && this.NewPassword2.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NewPassword2, length must be less than 128.", new [] { "NewPassword2" });
            }

            yield break;
        }
    }

}
