/*
 * Genie API
 *
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Genie.Api.Client.OpenAPIDateConverter;

namespace Genie.Api.Model
{
    /// <summary>
    /// HealthStatus
    /// </summary>
    [DataContract(Name = "HealthStatus")]
    public partial class HealthStatus : IEquatable<HealthStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HealthStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthStatus" /> class.
        /// </summary>
        /// <param name="dbUp">dbUp (required).</param>
        /// <param name="storageUp">storageUp (required).</param>
        /// <param name="cacheUp">cacheUp (required).</param>
        public HealthStatus(bool dbUp = default(bool), bool storageUp = default(bool), bool cacheUp = default(bool))
        {
            this.DbUp = dbUp;
            this.StorageUp = storageUp;
            this.CacheUp = cacheUp;
        }

        /// <summary>
        /// Gets or Sets DbUp
        /// </summary>
        [DataMember(Name = "db_up", IsRequired = true, EmitDefaultValue = true)]
        public bool DbUp { get; set; }

        /// <summary>
        /// Gets or Sets StorageUp
        /// </summary>
        [DataMember(Name = "storage_up", IsRequired = true, EmitDefaultValue = true)]
        public bool StorageUp { get; set; }

        /// <summary>
        /// Gets or Sets CacheUp
        /// </summary>
        [DataMember(Name = "cache_up", IsRequired = true, EmitDefaultValue = true)]
        public bool CacheUp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HealthStatus {\n");
            sb.Append("  DbUp: ").Append(DbUp).Append("\n");
            sb.Append("  StorageUp: ").Append(StorageUp).Append("\n");
            sb.Append("  CacheUp: ").Append(CacheUp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HealthStatus);
        }

        /// <summary>
        /// Returns true if HealthStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of HealthStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HealthStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DbUp == input.DbUp ||
                    this.DbUp.Equals(input.DbUp)
                ) && 
                (
                    this.StorageUp == input.StorageUp ||
                    this.StorageUp.Equals(input.StorageUp)
                ) && 
                (
                    this.CacheUp == input.CacheUp ||
                    this.CacheUp.Equals(input.CacheUp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.DbUp.GetHashCode();
                hashCode = hashCode * 59 + this.StorageUp.GetHashCode();
                hashCode = hashCode * 59 + this.CacheUp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
