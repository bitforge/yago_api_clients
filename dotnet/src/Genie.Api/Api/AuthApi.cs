/*
 * Genie API
 *
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Genie.Api.Client;
using Genie.Api.Model;

namespace Genie.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenObtainRequest"></param>
        /// <returns>TokenObtainResponse</returns>
        TokenObtainResponse AuthCreate(TokenObtainRequest tokenObtainRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenObtainRequest"></param>
        /// <returns>ApiResponse of TokenObtainResponse</returns>
        ApiResponse<TokenObtainResponse> AuthCreateWithHttpInfo(TokenObtainRequest tokenObtainRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a Google ID token and returns an access and refresh token for this API. If token is valid and user does not already exist, a new Genie user will be created.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="googleIdToken"></param>
        /// <returns>TokenObtainResponse</returns>
        TokenObtainResponse AuthGoogleCreate(GoogleIdToken googleIdToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a Google ID token and returns an access and refresh token for this API. If token is valid and user does not already exist, a new Genie user will be created.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="googleIdToken"></param>
        /// <returns>ApiResponse of TokenObtainResponse</returns>
        ApiResponse<TokenObtainResponse> AuthGoogleCreateWithHttpInfo(GoogleIdToken googleIdToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Password reset e-mail link is confirmed, reset the user&#39;s password.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetConfirm"></param>
        /// <returns>PasswordResetConfirm</returns>
        PasswordResetConfirm AuthPasswordResetConfirmCreate(PasswordResetConfirm passwordResetConfirm);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Password reset e-mail link is confirmed, reset the user&#39;s password.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetConfirm"></param>
        /// <returns>ApiResponse of PasswordResetConfirm</returns>
        ApiResponse<PasswordResetConfirm> AuthPasswordResetConfirmCreateWithHttpInfo(PasswordResetConfirm passwordResetConfirm);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request password reset. Send an email to the user first.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordReset"></param>
        /// <returns>PasswordReset</returns>
        PasswordReset AuthPasswordResetCreate(PasswordReset passwordReset);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request password reset. Send an email to the user first.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordReset"></param>
        /// <returns>ApiResponse of PasswordReset</returns>
        ApiResponse<PasswordReset> AuthPasswordResetCreateWithHttpInfo(PasswordReset passwordReset);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRefreshRequest"></param>
        /// <returns>TokenRefreshResponse</returns>
        TokenRefreshResponse AuthRefreshCreate(TokenRefreshRequest tokenRefreshRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRefreshRequest"></param>
        /// <returns>ApiResponse of TokenRefreshResponse</returns>
        ApiResponse<TokenRefreshResponse> AuthRefreshCreateWithHttpInfo(TokenRefreshRequest tokenRefreshRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a token and indicates if it is valid.  This view provides no information about a token&#39;s fitness for a particular use.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenVerify"></param>
        /// <returns></returns>
        void AuthVerifyCreate(TokenVerify tokenVerify);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a token and indicates if it is valid.  This view provides no information about a token&#39;s fitness for a particular use.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenVerify"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthVerifyCreateWithHttpInfo(TokenVerify tokenVerify);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenObtainRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenObtainResponse</returns>
        System.Threading.Tasks.Task<TokenObtainResponse> AuthCreateAsync(TokenObtainRequest tokenObtainRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenObtainRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenObtainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenObtainResponse>> AuthCreateWithHttpInfoAsync(TokenObtainRequest tokenObtainRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a Google ID token and returns an access and refresh token for this API. If token is valid and user does not already exist, a new Genie user will be created.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="googleIdToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenObtainResponse</returns>
        System.Threading.Tasks.Task<TokenObtainResponse> AuthGoogleCreateAsync(GoogleIdToken googleIdToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a Google ID token and returns an access and refresh token for this API. If token is valid and user does not already exist, a new Genie user will be created.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="googleIdToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenObtainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenObtainResponse>> AuthGoogleCreateWithHttpInfoAsync(GoogleIdToken googleIdToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Password reset e-mail link is confirmed, reset the user&#39;s password.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetConfirm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PasswordResetConfirm</returns>
        System.Threading.Tasks.Task<PasswordResetConfirm> AuthPasswordResetConfirmCreateAsync(PasswordResetConfirm passwordResetConfirm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Password reset e-mail link is confirmed, reset the user&#39;s password.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetConfirm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PasswordResetConfirm)</returns>
        System.Threading.Tasks.Task<ApiResponse<PasswordResetConfirm>> AuthPasswordResetConfirmCreateWithHttpInfoAsync(PasswordResetConfirm passwordResetConfirm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request password reset. Send an email to the user first.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordReset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PasswordReset</returns>
        System.Threading.Tasks.Task<PasswordReset> AuthPasswordResetCreateAsync(PasswordReset passwordReset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request password reset. Send an email to the user first.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordReset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PasswordReset)</returns>
        System.Threading.Tasks.Task<ApiResponse<PasswordReset>> AuthPasswordResetCreateWithHttpInfoAsync(PasswordReset passwordReset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRefreshRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenRefreshResponse</returns>
        System.Threading.Tasks.Task<TokenRefreshResponse> AuthRefreshCreateAsync(TokenRefreshRequest tokenRefreshRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRefreshRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenRefreshResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenRefreshResponse>> AuthRefreshCreateWithHttpInfoAsync(TokenRefreshRequest tokenRefreshRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a token and indicates if it is valid.  This view provides no information about a token&#39;s fitness for a particular use.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenVerify"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthVerifyCreateAsync(TokenVerify tokenVerify, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Takes a token and indicates if it is valid.  This view provides no information about a token&#39;s fitness for a particular use.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenVerify"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthVerifyCreateWithHttpInfoAsync(TokenVerify tokenVerify, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthApi : IAuthApiSync, IAuthApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthApi : IAuthApi
    {
        private Genie.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthApi(string basePath)
        {
            this.Configuration = Genie.Api.Client.Configuration.MergeConfigurations(
                Genie.Api.Client.GlobalConfiguration.Instance,
                new Genie.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Genie.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Genie.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Genie.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthApi(Genie.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Genie.Api.Client.Configuration.MergeConfigurations(
                Genie.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Genie.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Genie.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Genie.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthApi(Genie.Api.Client.ISynchronousClient client, Genie.Api.Client.IAsynchronousClient asyncClient, Genie.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Genie.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Genie.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Genie.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Genie.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genie.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenObtainRequest"></param>
        /// <returns>TokenObtainResponse</returns>
        public TokenObtainResponse AuthCreate(TokenObtainRequest tokenObtainRequest)
        {
            Genie.Api.Client.ApiResponse<TokenObtainResponse> localVarResponse = AuthCreateWithHttpInfo(tokenObtainRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenObtainRequest"></param>
        /// <returns>ApiResponse of TokenObtainResponse</returns>
        public Genie.Api.Client.ApiResponse<TokenObtainResponse> AuthCreateWithHttpInfo(TokenObtainRequest tokenObtainRequest)
        {
            // verify the required parameter 'tokenObtainRequest' is set
            if (tokenObtainRequest == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'tokenObtainRequest' when calling AuthApi->AuthCreate");

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenObtainRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TokenObtainResponse>("/api/auth/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenObtainRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenObtainResponse</returns>
        public async System.Threading.Tasks.Task<TokenObtainResponse> AuthCreateAsync(TokenObtainRequest tokenObtainRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Api.Client.ApiResponse<TokenObtainResponse> localVarResponse = await AuthCreateWithHttpInfoAsync(tokenObtainRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenObtainRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenObtainResponse)</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<TokenObtainResponse>> AuthCreateWithHttpInfoAsync(TokenObtainRequest tokenObtainRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tokenObtainRequest' is set
            if (tokenObtainRequest == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'tokenObtainRequest' when calling AuthApi->AuthCreate");


            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenObtainRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TokenObtainResponse>("/api/auth/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Takes a Google ID token and returns an access and refresh token for this API. If token is valid and user does not already exist, a new Genie user will be created.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="googleIdToken"></param>
        /// <returns>TokenObtainResponse</returns>
        public TokenObtainResponse AuthGoogleCreate(GoogleIdToken googleIdToken)
        {
            Genie.Api.Client.ApiResponse<TokenObtainResponse> localVarResponse = AuthGoogleCreateWithHttpInfo(googleIdToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Takes a Google ID token and returns an access and refresh token for this API. If token is valid and user does not already exist, a new Genie user will be created.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="googleIdToken"></param>
        /// <returns>ApiResponse of TokenObtainResponse</returns>
        public Genie.Api.Client.ApiResponse<TokenObtainResponse> AuthGoogleCreateWithHttpInfo(GoogleIdToken googleIdToken)
        {
            // verify the required parameter 'googleIdToken' is set
            if (googleIdToken == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'googleIdToken' when calling AuthApi->AuthGoogleCreate");

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = googleIdToken;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TokenObtainResponse>("/api/auth/google/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthGoogleCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Takes a Google ID token and returns an access and refresh token for this API. If token is valid and user does not already exist, a new Genie user will be created.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="googleIdToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenObtainResponse</returns>
        public async System.Threading.Tasks.Task<TokenObtainResponse> AuthGoogleCreateAsync(GoogleIdToken googleIdToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Api.Client.ApiResponse<TokenObtainResponse> localVarResponse = await AuthGoogleCreateWithHttpInfoAsync(googleIdToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Takes a Google ID token and returns an access and refresh token for this API. If token is valid and user does not already exist, a new Genie user will be created.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="googleIdToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenObtainResponse)</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<TokenObtainResponse>> AuthGoogleCreateWithHttpInfoAsync(GoogleIdToken googleIdToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'googleIdToken' is set
            if (googleIdToken == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'googleIdToken' when calling AuthApi->AuthGoogleCreate");


            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = googleIdToken;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TokenObtainResponse>("/api/auth/google/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthGoogleCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Password reset e-mail link is confirmed, reset the user&#39;s password.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetConfirm"></param>
        /// <returns>PasswordResetConfirm</returns>
        public PasswordResetConfirm AuthPasswordResetConfirmCreate(PasswordResetConfirm passwordResetConfirm)
        {
            Genie.Api.Client.ApiResponse<PasswordResetConfirm> localVarResponse = AuthPasswordResetConfirmCreateWithHttpInfo(passwordResetConfirm);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Password reset e-mail link is confirmed, reset the user&#39;s password.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetConfirm"></param>
        /// <returns>ApiResponse of PasswordResetConfirm</returns>
        public Genie.Api.Client.ApiResponse<PasswordResetConfirm> AuthPasswordResetConfirmCreateWithHttpInfo(PasswordResetConfirm passwordResetConfirm)
        {
            // verify the required parameter 'passwordResetConfirm' is set
            if (passwordResetConfirm == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'passwordResetConfirm' when calling AuthApi->AuthPasswordResetConfirmCreate");

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = passwordResetConfirm;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PasswordResetConfirm>("/api/auth/password/reset/confirm/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthPasswordResetConfirmCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Password reset e-mail link is confirmed, reset the user&#39;s password.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetConfirm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PasswordResetConfirm</returns>
        public async System.Threading.Tasks.Task<PasswordResetConfirm> AuthPasswordResetConfirmCreateAsync(PasswordResetConfirm passwordResetConfirm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Api.Client.ApiResponse<PasswordResetConfirm> localVarResponse = await AuthPasswordResetConfirmCreateWithHttpInfoAsync(passwordResetConfirm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Password reset e-mail link is confirmed, reset the user&#39;s password.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetConfirm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PasswordResetConfirm)</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<PasswordResetConfirm>> AuthPasswordResetConfirmCreateWithHttpInfoAsync(PasswordResetConfirm passwordResetConfirm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'passwordResetConfirm' is set
            if (passwordResetConfirm == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'passwordResetConfirm' when calling AuthApi->AuthPasswordResetConfirmCreate");


            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = passwordResetConfirm;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PasswordResetConfirm>("/api/auth/password/reset/confirm/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthPasswordResetConfirmCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request password reset. Send an email to the user first.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordReset"></param>
        /// <returns>PasswordReset</returns>
        public PasswordReset AuthPasswordResetCreate(PasswordReset passwordReset)
        {
            Genie.Api.Client.ApiResponse<PasswordReset> localVarResponse = AuthPasswordResetCreateWithHttpInfo(passwordReset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Request password reset. Send an email to the user first.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordReset"></param>
        /// <returns>ApiResponse of PasswordReset</returns>
        public Genie.Api.Client.ApiResponse<PasswordReset> AuthPasswordResetCreateWithHttpInfo(PasswordReset passwordReset)
        {
            // verify the required parameter 'passwordReset' is set
            if (passwordReset == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'passwordReset' when calling AuthApi->AuthPasswordResetCreate");

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = passwordReset;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PasswordReset>("/api/auth/password/reset/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthPasswordResetCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request password reset. Send an email to the user first.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordReset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PasswordReset</returns>
        public async System.Threading.Tasks.Task<PasswordReset> AuthPasswordResetCreateAsync(PasswordReset passwordReset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Api.Client.ApiResponse<PasswordReset> localVarResponse = await AuthPasswordResetCreateWithHttpInfoAsync(passwordReset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Request password reset. Send an email to the user first.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordReset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PasswordReset)</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<PasswordReset>> AuthPasswordResetCreateWithHttpInfoAsync(PasswordReset passwordReset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'passwordReset' is set
            if (passwordReset == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'passwordReset' when calling AuthApi->AuthPasswordResetCreate");


            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = passwordReset;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PasswordReset>("/api/auth/password/reset/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthPasswordResetCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRefreshRequest"></param>
        /// <returns>TokenRefreshResponse</returns>
        public TokenRefreshResponse AuthRefreshCreate(TokenRefreshRequest tokenRefreshRequest)
        {
            Genie.Api.Client.ApiResponse<TokenRefreshResponse> localVarResponse = AuthRefreshCreateWithHttpInfo(tokenRefreshRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRefreshRequest"></param>
        /// <returns>ApiResponse of TokenRefreshResponse</returns>
        public Genie.Api.Client.ApiResponse<TokenRefreshResponse> AuthRefreshCreateWithHttpInfo(TokenRefreshRequest tokenRefreshRequest)
        {
            // verify the required parameter 'tokenRefreshRequest' is set
            if (tokenRefreshRequest == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'tokenRefreshRequest' when calling AuthApi->AuthRefreshCreate");

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenRefreshRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TokenRefreshResponse>("/api/auth/refresh/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRefreshCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRefreshRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenRefreshResponse</returns>
        public async System.Threading.Tasks.Task<TokenRefreshResponse> AuthRefreshCreateAsync(TokenRefreshRequest tokenRefreshRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Api.Client.ApiResponse<TokenRefreshResponse> localVarResponse = await AuthRefreshCreateWithHttpInfoAsync(tokenRefreshRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRefreshRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenRefreshResponse)</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<TokenRefreshResponse>> AuthRefreshCreateWithHttpInfoAsync(TokenRefreshRequest tokenRefreshRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tokenRefreshRequest' is set
            if (tokenRefreshRequest == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'tokenRefreshRequest' when calling AuthApi->AuthRefreshCreate");


            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenRefreshRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TokenRefreshResponse>("/api/auth/refresh/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRefreshCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Takes a token and indicates if it is valid.  This view provides no information about a token&#39;s fitness for a particular use.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenVerify"></param>
        /// <returns></returns>
        public void AuthVerifyCreate(TokenVerify tokenVerify)
        {
            AuthVerifyCreateWithHttpInfo(tokenVerify);
        }

        /// <summary>
        ///  Takes a token and indicates if it is valid.  This view provides no information about a token&#39;s fitness for a particular use.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenVerify"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Genie.Api.Client.ApiResponse<Object> AuthVerifyCreateWithHttpInfo(TokenVerify tokenVerify)
        {
            // verify the required parameter 'tokenVerify' is set
            if (tokenVerify == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'tokenVerify' when calling AuthApi->AuthVerifyCreate");

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenVerify;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/auth/verify/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthVerifyCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Takes a token and indicates if it is valid.  This view provides no information about a token&#39;s fitness for a particular use.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenVerify"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthVerifyCreateAsync(TokenVerify tokenVerify, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AuthVerifyCreateWithHttpInfoAsync(tokenVerify, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Takes a token and indicates if it is valid.  This view provides no information about a token&#39;s fitness for a particular use.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenVerify"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<Object>> AuthVerifyCreateWithHttpInfoAsync(TokenVerify tokenVerify, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tokenVerify' is set
            if (tokenVerify == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'tokenVerify' when calling AuthApi->AuthVerifyCreate");


            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenVerify;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/auth/verify/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthVerifyCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
