/*
 * Genie API
 *
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Genie.Api.Client;
using Genie.Api.Model;

namespace Genie.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMembershipsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new project membership.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membership"></param>
        /// <returns>Membership</returns>
        Membership MembershipsCreate(Membership membership);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new project membership.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membership"></param>
        /// <returns>ApiResponse of Membership</returns>
        ApiResponse<Membership> MembershipsCreateWithHttpInfo(Membership membership);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a project member. Only OWNERS can do this.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project member.</param>
        /// <returns></returns>
        void MembershipsDestroy(Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a project member. Only OWNERS can do this.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project member.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MembershipsDestroyWithHttpInfo(Guid id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// All project memberships of projects the user is also a member of. Can be filtered by &#x60;project&#x60; and &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <returns>List&lt;Membership&gt;</returns>
        List<Membership> MembershipsList(Guid? project = default(Guid?), Guid? user = default(Guid?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// All project memberships of projects the user is also a member of. Can be filtered by &#x60;project&#x60; and &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Membership&gt;</returns>
        ApiResponse<List<Membership>> MembershipsListWithHttpInfo(Guid? project = default(Guid?), Guid? user = default(Guid?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMembershipsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new project membership.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membership"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Membership</returns>
        System.Threading.Tasks.Task<Membership> MembershipsCreateAsync(Membership membership, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new project membership.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membership"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Membership)</returns>
        System.Threading.Tasks.Task<ApiResponse<Membership>> MembershipsCreateWithHttpInfoAsync(Membership membership, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a project member. Only OWNERS can do this.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project member.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MembershipsDestroyAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a project member. Only OWNERS can do this.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project member.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MembershipsDestroyWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// All project memberships of projects the user is also a member of. Can be filtered by &#x60;project&#x60; and &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Membership&gt;</returns>
        System.Threading.Tasks.Task<List<Membership>> MembershipsListAsync(Guid? project = default(Guid?), Guid? user = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// All project memberships of projects the user is also a member of. Can be filtered by &#x60;project&#x60; and &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Membership&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Membership>>> MembershipsListWithHttpInfoAsync(Guid? project = default(Guid?), Guid? user = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMembershipsApi : IMembershipsApiSync, IMembershipsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MembershipsApi : IMembershipsApi
    {
        private Genie.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MembershipsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MembershipsApi(string basePath)
        {
            this.Configuration = Genie.Api.Client.Configuration.MergeConfigurations(
                Genie.Api.Client.GlobalConfiguration.Instance,
                new Genie.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Genie.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Genie.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Genie.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MembershipsApi(Genie.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Genie.Api.Client.Configuration.MergeConfigurations(
                Genie.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Genie.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Genie.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Genie.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MembershipsApi(Genie.Api.Client.ISynchronousClient client, Genie.Api.Client.IAsynchronousClient asyncClient, Genie.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Genie.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Genie.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Genie.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Genie.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genie.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Add a new project membership.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membership"></param>
        /// <returns>Membership</returns>
        public Membership MembershipsCreate(Membership membership)
        {
            Genie.Api.Client.ApiResponse<Membership> localVarResponse = MembershipsCreateWithHttpInfo(membership);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new project membership.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membership"></param>
        /// <returns>ApiResponse of Membership</returns>
        public Genie.Api.Client.ApiResponse<Membership> MembershipsCreateWithHttpInfo(Membership membership)
        {
            // verify the required parameter 'membership' is set
            if (membership == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'membership' when calling MembershipsApi->MembershipsCreate");

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = membership;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Membership>("/api/memberships/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MembershipsCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a new project membership.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membership"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Membership</returns>
        public async System.Threading.Tasks.Task<Membership> MembershipsCreateAsync(Membership membership, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Api.Client.ApiResponse<Membership> localVarResponse = await MembershipsCreateWithHttpInfoAsync(membership, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new project membership.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membership"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Membership)</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<Membership>> MembershipsCreateWithHttpInfoAsync(Membership membership, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'membership' is set
            if (membership == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'membership' when calling MembershipsApi->MembershipsCreate");


            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = membership;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Membership>("/api/memberships/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MembershipsCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Remove a project member. Only OWNERS can do this.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project member.</param>
        /// <returns></returns>
        public void MembershipsDestroy(Guid id)
        {
            MembershipsDestroyWithHttpInfo(id);
        }

        /// <summary>
        ///  Remove a project member. Only OWNERS can do this.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project member.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Genie.Api.Client.ApiResponse<Object> MembershipsDestroyWithHttpInfo(Guid id)
        {
            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/memberships/{id}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MembershipsDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Remove a project member. Only OWNERS can do this.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project member.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MembershipsDestroyAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MembershipsDestroyWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Remove a project member. Only OWNERS can do this.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project member.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<Object>> MembershipsDestroyWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/memberships/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MembershipsDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  All project memberships of projects the user is also a member of. Can be filtered by &#x60;project&#x60; and &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <returns>List&lt;Membership&gt;</returns>
        public List<Membership> MembershipsList(Guid? project = default(Guid?), Guid? user = default(Guid?))
        {
            Genie.Api.Client.ApiResponse<List<Membership>> localVarResponse = MembershipsListWithHttpInfo(project, user);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  All project memberships of projects the user is also a member of. Can be filtered by &#x60;project&#x60; and &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Membership&gt;</returns>
        public Genie.Api.Client.ApiResponse<List<Membership>> MembershipsListWithHttpInfo(Guid? project = default(Guid?), Guid? user = default(Guid?))
        {
            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Genie.Api.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(Genie.Api.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Membership>>("/api/memberships/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MembershipsList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  All project memberships of projects the user is also a member of. Can be filtered by &#x60;project&#x60; and &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Membership&gt;</returns>
        public async System.Threading.Tasks.Task<List<Membership>> MembershipsListAsync(Guid? project = default(Guid?), Guid? user = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Api.Client.ApiResponse<List<Membership>> localVarResponse = await MembershipsListWithHttpInfoAsync(project, user, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  All project memberships of projects the user is also a member of. Can be filtered by &#x60;project&#x60; and &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Membership&gt;)</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<List<Membership>>> MembershipsListWithHttpInfoAsync(Guid? project = default(Guid?), Guid? user = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Genie.Api.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(Genie.Api.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Membership>>("/api/memberships/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MembershipsList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
