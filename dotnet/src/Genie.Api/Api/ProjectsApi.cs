/*
 * Genie API
 *
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Genie.Api.Client;
using Genie.Api.Model;

namespace Genie.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new project. Change details later via PUT or PATCH.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"></param>
        /// <returns>Project</returns>
        Project ProjectsCreate(ProjectCreate projectCreate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new project. Change details later via PUT or PATCH.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"></param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> ProjectsCreateWithHttpInfo(ProjectCreate projectCreate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a project. Only members with role OWNER can do this.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <returns></returns>
        void ProjectsDestroy(Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a project. Only members with role OWNER can do this.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectsDestroyWithHttpInfo(Guid id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an image.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ProjectsImageDestroy(Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an image.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectsImageDestroyWithHttpInfo(Guid id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload an image. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FileUpload</returns>
        FileUpload ProjectsImageUpdate(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload an image. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FileUpload</returns>
        ApiResponse<FileUpload> ProjectsImageUpdateWithHttpInfo(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all projects the user is a member of.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Project&gt;</returns>
        List<Project> ProjectsList();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all projects the user is a member of.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Project&gt;</returns>
        ApiResponse<List<Project>> ProjectsListWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change as subset of project details.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="patchedProjectUpdate"> (optional)</param>
        /// <returns>ProjectUpdate</returns>
        ProjectUpdate ProjectsPartialUpdate(Guid id, PatchedProjectUpdate patchedProjectUpdate = default(PatchedProjectUpdate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change as subset of project details.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="patchedProjectUpdate"> (optional)</param>
        /// <returns>ApiResponse of ProjectUpdate</returns>
        ApiResponse<ProjectUpdate> ProjectsPartialUpdateWithHttpInfo(Guid id, PatchedProjectUpdate patchedProjectUpdate = default(PatchedProjectUpdate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Details of a single project.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <returns>Project</returns>
        Project ProjectsRetrieve(Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Details of a single project.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> ProjectsRetrieveWithHttpInfo(Guid id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change project and settings.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="projectUpdate"></param>
        /// <returns>ProjectUpdate</returns>
        ProjectUpdate ProjectsUpdate(Guid id, ProjectUpdate projectUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change project and settings.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="projectUpdate"></param>
        /// <returns>ApiResponse of ProjectUpdate</returns>
        ApiResponse<ProjectUpdate> ProjectsUpdateWithHttpInfo(Guid id, ProjectUpdate projectUpdate);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new project. Change details later via PUT or PATCH.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> ProjectsCreateAsync(ProjectCreate projectCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new project. Change details later via PUT or PATCH.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> ProjectsCreateWithHttpInfoAsync(ProjectCreate projectCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a project. Only members with role OWNER can do this.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectsDestroyAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a project. Only members with role OWNER can do this.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsDestroyWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an image.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectsImageDestroyAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an image.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsImageDestroyWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload an image. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileUpload</returns>
        System.Threading.Tasks.Task<FileUpload> ProjectsImageUpdateAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload an image. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileUpload)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileUpload>> ProjectsImageUpdateWithHttpInfoAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all projects the user is a member of.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Project&gt;</returns>
        System.Threading.Tasks.Task<List<Project>> ProjectsListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all projects the user is a member of.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Project&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Project>>> ProjectsListWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change as subset of project details.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="patchedProjectUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProjectUpdate</returns>
        System.Threading.Tasks.Task<ProjectUpdate> ProjectsPartialUpdateAsync(Guid id, PatchedProjectUpdate patchedProjectUpdate = default(PatchedProjectUpdate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change as subset of project details.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="patchedProjectUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProjectUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectUpdate>> ProjectsPartialUpdateWithHttpInfoAsync(Guid id, PatchedProjectUpdate patchedProjectUpdate = default(PatchedProjectUpdate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Details of a single project.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> ProjectsRetrieveAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Details of a single project.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> ProjectsRetrieveWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change project and settings.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="projectUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProjectUpdate</returns>
        System.Threading.Tasks.Task<ProjectUpdate> ProjectsUpdateAsync(Guid id, ProjectUpdate projectUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change project and settings.
        /// </remarks>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="projectUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProjectUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectUpdate>> ProjectsUpdateWithHttpInfoAsync(Guid id, ProjectUpdate projectUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApi : IProjectsApiSync, IProjectsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectsApi : IProjectsApi
    {
        private Genie.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi(string basePath)
        {
            this.Configuration = Genie.Api.Client.Configuration.MergeConfigurations(
                Genie.Api.Client.GlobalConfiguration.Instance,
                new Genie.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Genie.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Genie.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Genie.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectsApi(Genie.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Genie.Api.Client.Configuration.MergeConfigurations(
                Genie.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Genie.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Genie.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Genie.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProjectsApi(Genie.Api.Client.ISynchronousClient client, Genie.Api.Client.IAsynchronousClient asyncClient, Genie.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Genie.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Genie.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Genie.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Genie.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genie.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Add a new project. Change details later via PUT or PATCH.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"></param>
        /// <returns>Project</returns>
        public Project ProjectsCreate(ProjectCreate projectCreate)
        {
            Genie.Api.Client.ApiResponse<Project> localVarResponse = ProjectsCreateWithHttpInfo(projectCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new project. Change details later via PUT or PATCH.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"></param>
        /// <returns>ApiResponse of Project</returns>
        public Genie.Api.Client.ApiResponse<Project> ProjectsCreateWithHttpInfo(ProjectCreate projectCreate)
        {
            // verify the required parameter 'projectCreate' is set
            if (projectCreate == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'projectCreate' when calling ProjectsApi->ProjectsCreate");

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = projectCreate;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Project>("/api/projects/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a new project. Change details later via PUT or PATCH.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> ProjectsCreateAsync(ProjectCreate projectCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Api.Client.ApiResponse<Project> localVarResponse = await ProjectsCreateWithHttpInfoAsync(projectCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new project. Change details later via PUT or PATCH.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<Project>> ProjectsCreateWithHttpInfoAsync(ProjectCreate projectCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectCreate' is set
            if (projectCreate == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'projectCreate' when calling ProjectsApi->ProjectsCreate");


            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = projectCreate;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Project>("/api/projects/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Remove a project. Only members with role OWNER can do this.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <returns></returns>
        public void ProjectsDestroy(Guid id)
        {
            ProjectsDestroyWithHttpInfo(id);
        }

        /// <summary>
        ///  Remove a project. Only members with role OWNER can do this.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Genie.Api.Client.ApiResponse<Object> ProjectsDestroyWithHttpInfo(Guid id)
        {
            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/projects/{id}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Remove a project. Only members with role OWNER can do this.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectsDestroyAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProjectsDestroyWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Remove a project. Only members with role OWNER can do this.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<Object>> ProjectsDestroyWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/projects/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete an image.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ProjectsImageDestroy(Guid id)
        {
            ProjectsImageDestroyWithHttpInfo(id);
        }

        /// <summary>
        ///  Delete an image.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Genie.Api.Client.ApiResponse<Object> ProjectsImageDestroyWithHttpInfo(Guid id)
        {
            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/projects/{id}/image/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsImageDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete an image.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectsImageDestroyAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProjectsImageDestroyWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete an image.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<Object>> ProjectsImageDestroyWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/projects/{id}/image/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsImageDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload an image. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FileUpload</returns>
        public FileUpload ProjectsImageUpdate(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream))
        {
            Genie.Api.Client.ApiResponse<FileUpload> localVarResponse = ProjectsImageUpdateWithHttpInfo(contentDisposition, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload an image. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FileUpload</returns>
        public Genie.Api.Client.ApiResponse<FileUpload> ProjectsImageUpdateWithHttpInfo(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream))
        {
            // verify the required parameter 'contentDisposition' is set
            if (contentDisposition == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'contentDisposition' when calling ProjectsApi->ProjectsImageUpdate");

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "image/_*"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Disposition", Genie.Api.Client.ClientUtils.ParameterToString(contentDisposition)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<FileUpload>("/api/projects/{id}/image/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsImageUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload an image. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileUpload</returns>
        public async System.Threading.Tasks.Task<FileUpload> ProjectsImageUpdateAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Api.Client.ApiResponse<FileUpload> localVarResponse = await ProjectsImageUpdateWithHttpInfoAsync(contentDisposition, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload an image. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileUpload)</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<FileUpload>> ProjectsImageUpdateWithHttpInfoAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentDisposition' is set
            if (contentDisposition == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'contentDisposition' when calling ProjectsApi->ProjectsImageUpdate");


            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "image/_*"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Disposition", Genie.Api.Client.ClientUtils.ParameterToString(contentDisposition)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<FileUpload>("/api/projects/{id}/image/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsImageUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lists all projects the user is a member of.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Project&gt;</returns>
        public List<Project> ProjectsList()
        {
            Genie.Api.Client.ApiResponse<List<Project>> localVarResponse = ProjectsListWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all projects the user is a member of.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Project&gt;</returns>
        public Genie.Api.Client.ApiResponse<List<Project>> ProjectsListWithHttpInfo()
        {
            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Project>>("/api/projects/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lists all projects the user is a member of.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Project&gt;</returns>
        public async System.Threading.Tasks.Task<List<Project>> ProjectsListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Api.Client.ApiResponse<List<Project>> localVarResponse = await ProjectsListWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all projects the user is a member of.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Project&gt;)</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<List<Project>>> ProjectsListWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Project>>("/api/projects/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Change as subset of project details.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="patchedProjectUpdate"> (optional)</param>
        /// <returns>ProjectUpdate</returns>
        public ProjectUpdate ProjectsPartialUpdate(Guid id, PatchedProjectUpdate patchedProjectUpdate = default(PatchedProjectUpdate))
        {
            Genie.Api.Client.ApiResponse<ProjectUpdate> localVarResponse = ProjectsPartialUpdateWithHttpInfo(id, patchedProjectUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Change as subset of project details.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="patchedProjectUpdate"> (optional)</param>
        /// <returns>ApiResponse of ProjectUpdate</returns>
        public Genie.Api.Client.ApiResponse<ProjectUpdate> ProjectsPartialUpdateWithHttpInfo(Guid id, PatchedProjectUpdate patchedProjectUpdate = default(PatchedProjectUpdate))
        {
            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchedProjectUpdate;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ProjectUpdate>("/api/projects/{id}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsPartialUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Change as subset of project details.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="patchedProjectUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProjectUpdate</returns>
        public async System.Threading.Tasks.Task<ProjectUpdate> ProjectsPartialUpdateAsync(Guid id, PatchedProjectUpdate patchedProjectUpdate = default(PatchedProjectUpdate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Api.Client.ApiResponse<ProjectUpdate> localVarResponse = await ProjectsPartialUpdateWithHttpInfoAsync(id, patchedProjectUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Change as subset of project details.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="patchedProjectUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProjectUpdate)</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<ProjectUpdate>> ProjectsPartialUpdateWithHttpInfoAsync(Guid id, PatchedProjectUpdate patchedProjectUpdate = default(PatchedProjectUpdate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchedProjectUpdate;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<ProjectUpdate>("/api/projects/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsPartialUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Details of a single project.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <returns>Project</returns>
        public Project ProjectsRetrieve(Guid id)
        {
            Genie.Api.Client.ApiResponse<Project> localVarResponse = ProjectsRetrieveWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Details of a single project.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <returns>ApiResponse of Project</returns>
        public Genie.Api.Client.ApiResponse<Project> ProjectsRetrieveWithHttpInfo(Guid id)
        {
            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Project>("/api/projects/{id}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsRetrieve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Details of a single project.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> ProjectsRetrieveAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Api.Client.ApiResponse<Project> localVarResponse = await ProjectsRetrieveWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Details of a single project.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<Project>> ProjectsRetrieveWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Project>("/api/projects/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsRetrieve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Change project and settings.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="projectUpdate"></param>
        /// <returns>ProjectUpdate</returns>
        public ProjectUpdate ProjectsUpdate(Guid id, ProjectUpdate projectUpdate)
        {
            Genie.Api.Client.ApiResponse<ProjectUpdate> localVarResponse = ProjectsUpdateWithHttpInfo(id, projectUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Change project and settings.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="projectUpdate"></param>
        /// <returns>ApiResponse of ProjectUpdate</returns>
        public Genie.Api.Client.ApiResponse<ProjectUpdate> ProjectsUpdateWithHttpInfo(Guid id, ProjectUpdate projectUpdate)
        {
            // verify the required parameter 'projectUpdate' is set
            if (projectUpdate == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'projectUpdate' when calling ProjectsApi->ProjectsUpdate");

            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = projectUpdate;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProjectUpdate>("/api/projects/{id}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Change project and settings.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="projectUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProjectUpdate</returns>
        public async System.Threading.Tasks.Task<ProjectUpdate> ProjectsUpdateAsync(Guid id, ProjectUpdate projectUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Api.Client.ApiResponse<ProjectUpdate> localVarResponse = await ProjectsUpdateWithHttpInfoAsync(id, projectUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Change project and settings.
        /// </summary>
        /// <exception cref="Genie.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Project.</param>
        /// <param name="projectUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProjectUpdate)</returns>
        public async System.Threading.Tasks.Task<Genie.Api.Client.ApiResponse<ProjectUpdate>> ProjectsUpdateWithHttpInfoAsync(Guid id, ProjectUpdate projectUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUpdate' is set
            if (projectUpdate == null)
                throw new Genie.Api.Client.ApiException(400, "Missing required parameter 'projectUpdate' when calling ProjectsApi->ProjectsUpdate");


            Genie.Api.Client.RequestOptions localVarRequestOptions = new Genie.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = projectUpdate;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProjectUpdate>("/api/projects/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectsUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
