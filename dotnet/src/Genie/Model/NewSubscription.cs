/*
 * Genie API
 *
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Genie.Client.OpenAPIDateConverter;

namespace Genie.Model
{
    /// <summary>
    /// NewSubscription
    /// </summary>
    [DataContract(Name = "NewSubscription")]
    public partial class NewSubscription : IEquatable<NewSubscription>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Plan
        /// </summary>
        [DataMember(Name = "plan", IsRequired = true, EmitDefaultValue = false)]
        public PlanEnum Plan { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "payment_method", IsRequired = true, EmitDefaultValue = false)]
        public PaymentMethodEnum PaymentMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewSubscription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewSubscription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewSubscription" /> class.
        /// </summary>
        /// <param name="plan">plan (required).</param>
        /// <param name="paymentMethod">paymentMethod (required).</param>
        /// <param name="tosAccepted">tosAccepted (required).</param>
        public NewSubscription(PlanEnum plan = default(PlanEnum), PaymentMethodEnum paymentMethod = default(PaymentMethodEnum), bool tosAccepted = default(bool))
        {
            this.Plan = plan;
            this.PaymentMethod = paymentMethod;
            this.TosAccepted = tosAccepted;
        }

        /// <summary>
        /// Gets or Sets TosAccepted
        /// </summary>
        [DataMember(Name = "tos_accepted", IsRequired = true, EmitDefaultValue = true)]
        public bool TosAccepted { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name = "customer_id", IsRequired = true, EmitDefaultValue = false)]
        public string CustomerId { get; private set; }

        /// <summary>
        /// Returns false as CustomerId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        [DataMember(Name = "subscription_id", IsRequired = true, EmitDefaultValue = false)]
        public string SubscriptionId { get; private set; }

        /// <summary>
        /// Returns false as SubscriptionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubscriptionId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ClientSecret
        /// </summary>
        [DataMember(Name = "client_secret", IsRequired = true, EmitDefaultValue = false)]
        public string ClientSecret { get; private set; }

        /// <summary>
        /// Returns false as ClientSecret should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientSecret()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewSubscription {\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  TosAccepted: ").Append(TosAccepted).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewSubscription);
        }

        /// <summary>
        /// Returns true if NewSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of NewSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewSubscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Plan == input.Plan ||
                    this.Plan.Equals(input.Plan)
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    this.PaymentMethod.Equals(input.PaymentMethod)
                ) && 
                (
                    this.TosAccepted == input.TosAccepted ||
                    this.TosAccepted.Equals(input.TosAccepted)
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.SubscriptionId == input.SubscriptionId ||
                    (this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(input.SubscriptionId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Plan.GetHashCode();
                hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                hashCode = hashCode * 59 + this.TosAccepted.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.SubscriptionId != null)
                    hashCode = hashCode * 59 + this.SubscriptionId.GetHashCode();
                if (this.ClientSecret != null)
                    hashCode = hashCode * 59 + this.ClientSecret.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
