/*
 * Genie API
 *
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Genie.Client.OpenAPIDateConverter;

namespace Genie.Model
{
    /// <summary>
    /// ProjectUpdate
    /// </summary>
    [DataContract(Name = "ProjectUpdate")]
    public partial class ProjectUpdate : IEquatable<ProjectUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectUpdate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectUpdate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectUpdate" /> class.
        /// </summary>
        /// <param name="name">Name will be visible as title in gallery. (required).</param>
        /// <param name="description">description.</param>
        /// <param name="website">website.</param>
        /// <param name="gallery">Activates a publicly available gallery with all project models in state READY or ONLINE..</param>
        /// <param name="translationsDe">translationsDe.</param>
        /// <param name="translationsEn">translationsEn.</param>
        /// <param name="translationsFr">translationsFr.</param>
        /// <param name="translationsIt">translationsIt.</param>
        /// <param name="backlinkUrls">Enable urls to the product on your site. Required when using standalone QR codes (e.g. Print)..</param>
        public ProjectUpdate(string name = default(string), string description = default(string), string website = default(string), bool gallery = default(bool), bool translationsDe = default(bool), bool translationsEn = default(bool), bool translationsFr = default(bool), bool translationsIt = default(bool), bool backlinkUrls = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for ProjectUpdate and cannot be null");
            }
            this.Name = name;
            this.Description = description;
            this.Website = website;
            this.Gallery = gallery;
            this.TranslationsDe = translationsDe;
            this.TranslationsEn = translationsEn;
            this.TranslationsFr = translationsFr;
            this.TranslationsIt = translationsIt;
            this.BacklinkUrls = backlinkUrls;
        }

        /// <summary>
        /// Name will be visible as title in gallery.
        /// </summary>
        /// <value>Name will be visible as title in gallery.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name = "website", EmitDefaultValue = true)]
        public string Website { get; set; }

        /// <summary>
        /// Activates a publicly available gallery with all project models in state READY or ONLINE.
        /// </summary>
        /// <value>Activates a publicly available gallery with all project models in state READY or ONLINE.</value>
        [DataMember(Name = "gallery", EmitDefaultValue = true)]
        public bool Gallery { get; set; }

        /// <summary>
        /// Gets or Sets TranslationsDe
        /// </summary>
        [DataMember(Name = "translations_de", EmitDefaultValue = true)]
        public bool TranslationsDe { get; set; }

        /// <summary>
        /// Gets or Sets TranslationsEn
        /// </summary>
        [DataMember(Name = "translations_en", EmitDefaultValue = true)]
        public bool TranslationsEn { get; set; }

        /// <summary>
        /// Gets or Sets TranslationsFr
        /// </summary>
        [DataMember(Name = "translations_fr", EmitDefaultValue = true)]
        public bool TranslationsFr { get; set; }

        /// <summary>
        /// Gets or Sets TranslationsIt
        /// </summary>
        [DataMember(Name = "translations_it", EmitDefaultValue = true)]
        public bool TranslationsIt { get; set; }

        /// <summary>
        /// Enable urls to the product on your site. Required when using standalone QR codes (e.g. Print).
        /// </summary>
        /// <value>Enable urls to the product on your site. Required when using standalone QR codes (e.g. Print).</value>
        [DataMember(Name = "backlink_urls", EmitDefaultValue = true)]
        public bool BacklinkUrls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectUpdate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Gallery: ").Append(Gallery).Append("\n");
            sb.Append("  TranslationsDe: ").Append(TranslationsDe).Append("\n");
            sb.Append("  TranslationsEn: ").Append(TranslationsEn).Append("\n");
            sb.Append("  TranslationsFr: ").Append(TranslationsFr).Append("\n");
            sb.Append("  TranslationsIt: ").Append(TranslationsIt).Append("\n");
            sb.Append("  BacklinkUrls: ").Append(BacklinkUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectUpdate);
        }

        /// <summary>
        /// Returns true if ProjectUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Gallery == input.Gallery ||
                    this.Gallery.Equals(input.Gallery)
                ) && 
                (
                    this.TranslationsDe == input.TranslationsDe ||
                    this.TranslationsDe.Equals(input.TranslationsDe)
                ) && 
                (
                    this.TranslationsEn == input.TranslationsEn ||
                    this.TranslationsEn.Equals(input.TranslationsEn)
                ) && 
                (
                    this.TranslationsFr == input.TranslationsFr ||
                    this.TranslationsFr.Equals(input.TranslationsFr)
                ) && 
                (
                    this.TranslationsIt == input.TranslationsIt ||
                    this.TranslationsIt.Equals(input.TranslationsIt)
                ) && 
                (
                    this.BacklinkUrls == input.BacklinkUrls ||
                    this.BacklinkUrls.Equals(input.BacklinkUrls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                hashCode = hashCode * 59 + this.Gallery.GetHashCode();
                hashCode = hashCode * 59 + this.TranslationsDe.GetHashCode();
                hashCode = hashCode * 59 + this.TranslationsEn.GetHashCode();
                hashCode = hashCode * 59 + this.TranslationsFr.GetHashCode();
                hashCode = hashCode * 59 + this.TranslationsIt.GetHashCode();
                hashCode = hashCode * 59 + this.BacklinkUrls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

            // Website (string) maxLength
            if(this.Website != null && this.Website.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Website, length must be less than 200.", new [] { "Website" });
            }

            yield break;
        }
    }

}
