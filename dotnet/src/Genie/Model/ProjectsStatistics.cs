/*
 * Genie API
 *
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Genie.Client.OpenAPIDateConverter;

namespace Genie.Model
{
    /// <summary>
    /// ProjectsStatistics
    /// </summary>
    [DataContract(Name = "ProjectsStatistics")]
    public partial class ProjectsStatistics : IEquatable<ProjectsStatistics>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ReportFormat
        /// </summary>
        [DataMember(Name = "report_format", IsRequired = true, EmitDefaultValue = false)]
        public ReportFormatEnum ReportFormat { get; set; }

        /// <summary>
        /// Gets or Sets TimeRange
        /// </summary>
        [DataMember(Name = "time_range", IsRequired = true, EmitDefaultValue = false)]
        public TimeRangeEnum TimeRange { get; set; }

        /// <summary>
        /// Gets or Sets FilterEvents
        /// </summary>
        [DataMember(Name = "filter_events", IsRequired = true, EmitDefaultValue = false)]
        public FilterEventsEnum FilterEvents { get; set; }

        /// <summary>
        /// Gets or Sets GroupBy
        /// </summary>
        [DataMember(Name = "group_by", IsRequired = true, EmitDefaultValue = false)]
        public ProjectsStatisticsGroupByEnum GroupBy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsStatistics" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectsStatistics() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsStatistics" /> class.
        /// </summary>
        /// <param name="reportFormat">reportFormat (required).</param>
        /// <param name="timeRange">timeRange (required).</param>
        /// <param name="filterEvents">filterEvents (required).</param>
        /// <param name="groupBy">groupBy (required).</param>
        public ProjectsStatistics(ReportFormatEnum reportFormat = default(ReportFormatEnum), TimeRangeEnum timeRange = default(TimeRangeEnum), FilterEventsEnum filterEvents = default(FilterEventsEnum), ProjectsStatisticsGroupByEnum groupBy = default(ProjectsStatisticsGroupByEnum))
        {
            this.ReportFormat = reportFormat;
            this.TimeRange = timeRange;
            this.FilterEvents = filterEvents;
            this.GroupBy = groupBy;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectsStatistics {\n");
            sb.Append("  ReportFormat: ").Append(ReportFormat).Append("\n");
            sb.Append("  TimeRange: ").Append(TimeRange).Append("\n");
            sb.Append("  FilterEvents: ").Append(FilterEvents).Append("\n");
            sb.Append("  GroupBy: ").Append(GroupBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectsStatistics);
        }

        /// <summary>
        /// Returns true if ProjectsStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectsStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectsStatistics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReportFormat == input.ReportFormat ||
                    this.ReportFormat.Equals(input.ReportFormat)
                ) && 
                (
                    this.TimeRange == input.TimeRange ||
                    this.TimeRange.Equals(input.TimeRange)
                ) && 
                (
                    this.FilterEvents == input.FilterEvents ||
                    this.FilterEvents.Equals(input.FilterEvents)
                ) && 
                (
                    this.GroupBy == input.GroupBy ||
                    this.GroupBy.Equals(input.GroupBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ReportFormat.GetHashCode();
                hashCode = hashCode * 59 + this.TimeRange.GetHashCode();
                hashCode = hashCode * 59 + this.FilterEvents.GetHashCode();
                hashCode = hashCode * 59 + this.GroupBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
