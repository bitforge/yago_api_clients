/*
 * Genie API
 *
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Genie.Client;
using Genie.Model;

namespace Genie.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Traffic analytics over all projects and models.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalStatistics"></param>
        /// <returns>SummaryStats</returns>
        SummaryStats StatsGlobalCreate(GlobalStatistics globalStatistics);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Traffic analytics over all projects and models.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalStatistics"></param>
        /// <returns>ApiResponse of SummaryStats</returns>
        ApiResponse<SummaryStats> StatsGlobalCreateWithHttpInfo(GlobalStatistics globalStatistics);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Traffic for single project and all models of that project. Raises 404 if the user is not allowed to view data of this project.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectsStatistics"></param>
        /// <returns>SummaryStats</returns>
        SummaryStats StatsProjectCreate(Guid id, ProjectsStatistics projectsStatistics);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Traffic for single project and all models of that project. Raises 404 if the user is not allowed to view data of this project.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectsStatistics"></param>
        /// <returns>ApiResponse of SummaryStats</returns>
        ApiResponse<SummaryStats> StatsProjectCreateWithHttpInfo(Guid id, ProjectsStatistics projectsStatistics);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Traffic analytics over all projects and models.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalStatistics"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummaryStats</returns>
        System.Threading.Tasks.Task<SummaryStats> StatsGlobalCreateAsync(GlobalStatistics globalStatistics, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Traffic analytics over all projects and models.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalStatistics"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummaryStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<SummaryStats>> StatsGlobalCreateWithHttpInfoAsync(GlobalStatistics globalStatistics, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Traffic for single project and all models of that project. Raises 404 if the user is not allowed to view data of this project.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectsStatistics"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummaryStats</returns>
        System.Threading.Tasks.Task<SummaryStats> StatsProjectCreateAsync(Guid id, ProjectsStatistics projectsStatistics, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Traffic for single project and all models of that project. Raises 404 if the user is not allowed to view data of this project.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectsStatistics"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummaryStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<SummaryStats>> StatsProjectCreateWithHttpInfoAsync(Guid id, ProjectsStatistics projectsStatistics, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsApi : IStatsApiSync, IStatsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatsApi : IStatsApi
    {
        private Genie.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatsApi(string basePath)
        {
            this.Configuration = Genie.Client.Configuration.MergeConfigurations(
                Genie.Client.GlobalConfiguration.Instance,
                new Genie.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Genie.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Genie.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Genie.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatsApi(Genie.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Genie.Client.Configuration.MergeConfigurations(
                Genie.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Genie.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Genie.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Genie.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StatsApi(Genie.Client.ISynchronousClient client, Genie.Client.IAsynchronousClient asyncClient, Genie.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Genie.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Genie.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Genie.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Genie.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genie.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Traffic analytics over all projects and models.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalStatistics"></param>
        /// <returns>SummaryStats</returns>
        public SummaryStats StatsGlobalCreate(GlobalStatistics globalStatistics)
        {
            Genie.Client.ApiResponse<SummaryStats> localVarResponse = StatsGlobalCreateWithHttpInfo(globalStatistics);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Traffic analytics over all projects and models.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalStatistics"></param>
        /// <returns>ApiResponse of SummaryStats</returns>
        public Genie.Client.ApiResponse<SummaryStats> StatsGlobalCreateWithHttpInfo(GlobalStatistics globalStatistics)
        {
            // verify the required parameter 'globalStatistics' is set
            if (globalStatistics == null)
                throw new Genie.Client.ApiException(400, "Missing required parameter 'globalStatistics' when calling StatsApi->StatsGlobalCreate");

            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = globalStatistics;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SummaryStats>("/api/stats/global/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatsGlobalCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Traffic analytics over all projects and models.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalStatistics"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummaryStats</returns>
        public async System.Threading.Tasks.Task<SummaryStats> StatsGlobalCreateAsync(GlobalStatistics globalStatistics, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Client.ApiResponse<SummaryStats> localVarResponse = await StatsGlobalCreateWithHttpInfoAsync(globalStatistics, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Traffic analytics over all projects and models.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalStatistics"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummaryStats)</returns>
        public async System.Threading.Tasks.Task<Genie.Client.ApiResponse<SummaryStats>> StatsGlobalCreateWithHttpInfoAsync(GlobalStatistics globalStatistics, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'globalStatistics' is set
            if (globalStatistics == null)
                throw new Genie.Client.ApiException(400, "Missing required parameter 'globalStatistics' when calling StatsApi->StatsGlobalCreate");


            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = globalStatistics;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SummaryStats>("/api/stats/global/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatsGlobalCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Traffic for single project and all models of that project. Raises 404 if the user is not allowed to view data of this project.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectsStatistics"></param>
        /// <returns>SummaryStats</returns>
        public SummaryStats StatsProjectCreate(Guid id, ProjectsStatistics projectsStatistics)
        {
            Genie.Client.ApiResponse<SummaryStats> localVarResponse = StatsProjectCreateWithHttpInfo(id, projectsStatistics);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Traffic for single project and all models of that project. Raises 404 if the user is not allowed to view data of this project.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectsStatistics"></param>
        /// <returns>ApiResponse of SummaryStats</returns>
        public Genie.Client.ApiResponse<SummaryStats> StatsProjectCreateWithHttpInfo(Guid id, ProjectsStatistics projectsStatistics)
        {
            // verify the required parameter 'projectsStatistics' is set
            if (projectsStatistics == null)
                throw new Genie.Client.ApiException(400, "Missing required parameter 'projectsStatistics' when calling StatsApi->StatsProjectCreate");

            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = projectsStatistics;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SummaryStats>("/api/stats/project/{id}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatsProjectCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Traffic for single project and all models of that project. Raises 404 if the user is not allowed to view data of this project.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectsStatistics"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummaryStats</returns>
        public async System.Threading.Tasks.Task<SummaryStats> StatsProjectCreateAsync(Guid id, ProjectsStatistics projectsStatistics, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Client.ApiResponse<SummaryStats> localVarResponse = await StatsProjectCreateWithHttpInfoAsync(id, projectsStatistics, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Traffic for single project and all models of that project. Raises 404 if the user is not allowed to view data of this project.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectsStatistics"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummaryStats)</returns>
        public async System.Threading.Tasks.Task<Genie.Client.ApiResponse<SummaryStats>> StatsProjectCreateWithHttpInfoAsync(Guid id, ProjectsStatistics projectsStatistics, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectsStatistics' is set
            if (projectsStatistics == null)
                throw new Genie.Client.ApiException(400, "Missing required parameter 'projectsStatistics' when calling StatsApi->StatsProjectCreate");


            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = projectsStatistics;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SummaryStats>("/api/stats/project/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatsProjectCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
