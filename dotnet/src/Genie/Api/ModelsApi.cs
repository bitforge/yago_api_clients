/*
 * Genie API
 *
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Genie.Client;
using Genie.Model;

namespace Genie.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModelsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new model. Change details and translations later via PUT or PATCH.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCreate"></param>
        /// <returns>ModelCreate</returns>
        ModelCreate ModelsCreate(ModelCreate modelCreate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new model. Change details and translations later via PUT or PATCH.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCreate"></param>
        /// <returns>ApiResponse of ModelCreate</returns>
        ApiResponse<ModelCreate> ModelsCreateWithHttpInfo(ModelCreate modelCreate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a model. Be cautious, this is permanent!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <returns></returns>
        void ModelsDestroy(Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a model. Be cautious, this is permanent!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ModelsDestroyWithHttpInfo(Guid id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ModelsGlbDestroy(Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ModelsGlbDestroyWithHttpInfo(Guid id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a file. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FileUpload</returns>
        FileUpload ModelsGlbUpdate(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a file. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FileUpload</returns>
        ApiResponse<FileUpload> ModelsGlbUpdateWithHttpInfo(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an image.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ModelsImageDestroy(Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an image.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ModelsImageDestroyWithHttpInfo(Guid id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload an image. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FileUpload</returns>
        FileUpload ModelsImageUpdate(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload an image. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FileUpload</returns>
        ApiResponse<FileUpload> ModelsImageUpdateWithHttpInfo(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all models for all projects the user is a member of. Can be filtered by &#x60;project&#x60;.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="status">DRAFT&#x3D;In development, READY&#x3D;Modelling complete, ONLINE&#x3D;Active use. (optional)</param>
        /// <returns>List&lt;Model&gt;</returns>
        List<Model> ModelsList(Guid? project = default(Guid?), string status = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all models for all projects the user is a member of. Can be filtered by &#x60;project&#x60;.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="status">DRAFT&#x3D;In development, READY&#x3D;Modelling complete, ONLINE&#x3D;Active use. (optional)</param>
        /// <returns>ApiResponse of List&lt;Model&gt;</returns>
        ApiResponse<List<Model>> ModelsListWithHttpInfo(Guid? project = default(Guid?), string status = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change as subset of model details.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="patchedModelUpdate"> (optional)</param>
        /// <returns>ModelUpdate</returns>
        ModelUpdate ModelsPartialUpdate(Guid id, PatchedModelUpdate patchedModelUpdate = default(PatchedModelUpdate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change as subset of model details.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="patchedModelUpdate"> (optional)</param>
        /// <returns>ApiResponse of ModelUpdate</returns>
        ApiResponse<ModelUpdate> ModelsPartialUpdateWithHttpInfo(Guid id, PatchedModelUpdate patchedModelUpdate = default(PatchedModelUpdate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Details of a single model.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <returns>Model</returns>
        Model ModelsRetrieve(Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Details of a single model.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <returns>ApiResponse of Model</returns>
        ApiResponse<Model> ModelsRetrieveWithHttpInfo(Guid id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change model details. Translated field are all optional expcet for &#x60;name_de&#x60;.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="modelUpdate"> (optional)</param>
        /// <returns>ModelUpdate</returns>
        ModelUpdate ModelsUpdate(Guid id, ModelUpdate modelUpdate = default(ModelUpdate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change model details. Translated field are all optional expcet for &#x60;name_de&#x60;.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="modelUpdate"> (optional)</param>
        /// <returns>ApiResponse of ModelUpdate</returns>
        ApiResponse<ModelUpdate> ModelsUpdateWithHttpInfo(Guid id, ModelUpdate modelUpdate = default(ModelUpdate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ModelsUsdzDestroy(Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ModelsUsdzDestroyWithHttpInfo(Guid id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a file. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FileUpload</returns>
        FileUpload ModelsUsdzUpdate(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a file. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FileUpload</returns>
        ApiResponse<FileUpload> ModelsUsdzUpdateWithHttpInfo(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModelsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new model. Change details and translations later via PUT or PATCH.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelCreate</returns>
        System.Threading.Tasks.Task<ModelCreate> ModelsCreateAsync(ModelCreate modelCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new model. Change details and translations later via PUT or PATCH.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelCreate>> ModelsCreateWithHttpInfoAsync(ModelCreate modelCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a model. Be cautious, this is permanent!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ModelsDestroyAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a model. Be cautious, this is permanent!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModelsDestroyWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ModelsGlbDestroyAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModelsGlbDestroyWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a file. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileUpload</returns>
        System.Threading.Tasks.Task<FileUpload> ModelsGlbUpdateAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a file. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileUpload)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileUpload>> ModelsGlbUpdateWithHttpInfoAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an image.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ModelsImageDestroyAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an image.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModelsImageDestroyWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload an image. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileUpload</returns>
        System.Threading.Tasks.Task<FileUpload> ModelsImageUpdateAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload an image. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileUpload)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileUpload>> ModelsImageUpdateWithHttpInfoAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all models for all projects the user is a member of. Can be filtered by &#x60;project&#x60;.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="status">DRAFT&#x3D;In development, READY&#x3D;Modelling complete, ONLINE&#x3D;Active use. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Model&gt;</returns>
        System.Threading.Tasks.Task<List<Model>> ModelsListAsync(Guid? project = default(Guid?), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all models for all projects the user is a member of. Can be filtered by &#x60;project&#x60;.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="status">DRAFT&#x3D;In development, READY&#x3D;Modelling complete, ONLINE&#x3D;Active use. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Model&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Model>>> ModelsListWithHttpInfoAsync(Guid? project = default(Guid?), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change as subset of model details.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="patchedModelUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelUpdate</returns>
        System.Threading.Tasks.Task<ModelUpdate> ModelsPartialUpdateAsync(Guid id, PatchedModelUpdate patchedModelUpdate = default(PatchedModelUpdate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change as subset of model details.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="patchedModelUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelUpdate>> ModelsPartialUpdateWithHttpInfoAsync(Guid id, PatchedModelUpdate patchedModelUpdate = default(PatchedModelUpdate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Details of a single model.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Model</returns>
        System.Threading.Tasks.Task<Model> ModelsRetrieveAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Details of a single model.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Model)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model>> ModelsRetrieveWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change model details. Translated field are all optional expcet for &#x60;name_de&#x60;.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="modelUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelUpdate</returns>
        System.Threading.Tasks.Task<ModelUpdate> ModelsUpdateAsync(Guid id, ModelUpdate modelUpdate = default(ModelUpdate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change model details. Translated field are all optional expcet for &#x60;name_de&#x60;.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="modelUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelUpdate>> ModelsUpdateWithHttpInfoAsync(Guid id, ModelUpdate modelUpdate = default(ModelUpdate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ModelsUsdzDestroyAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file.
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModelsUsdzDestroyWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a file. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileUpload</returns>
        System.Threading.Tasks.Task<FileUpload> ModelsUsdzUpdateAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a file. Max size 30MB. Filename is required!
        /// </remarks>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileUpload)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileUpload>> ModelsUsdzUpdateWithHttpInfoAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModelsApi : IModelsApiSync, IModelsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModelsApi : IModelsApi
    {
        private Genie.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModelsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModelsApi(string basePath)
        {
            this.Configuration = Genie.Client.Configuration.MergeConfigurations(
                Genie.Client.GlobalConfiguration.Instance,
                new Genie.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Genie.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Genie.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Genie.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModelsApi(Genie.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Genie.Client.Configuration.MergeConfigurations(
                Genie.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Genie.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Genie.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Genie.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModelsApi(Genie.Client.ISynchronousClient client, Genie.Client.IAsynchronousClient asyncClient, Genie.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Genie.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Genie.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Genie.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Genie.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genie.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Add a new model. Change details and translations later via PUT or PATCH.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCreate"></param>
        /// <returns>ModelCreate</returns>
        public ModelCreate ModelsCreate(ModelCreate modelCreate)
        {
            Genie.Client.ApiResponse<ModelCreate> localVarResponse = ModelsCreateWithHttpInfo(modelCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new model. Change details and translations later via PUT or PATCH.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCreate"></param>
        /// <returns>ApiResponse of ModelCreate</returns>
        public Genie.Client.ApiResponse<ModelCreate> ModelsCreateWithHttpInfo(ModelCreate modelCreate)
        {
            // verify the required parameter 'modelCreate' is set
            if (modelCreate == null)
                throw new Genie.Client.ApiException(400, "Missing required parameter 'modelCreate' when calling ModelsApi->ModelsCreate");

            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = modelCreate;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModelCreate>("/api/models/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a new model. Change details and translations later via PUT or PATCH.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelCreate</returns>
        public async System.Threading.Tasks.Task<ModelCreate> ModelsCreateAsync(ModelCreate modelCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Client.ApiResponse<ModelCreate> localVarResponse = await ModelsCreateWithHttpInfoAsync(modelCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new model. Change details and translations later via PUT or PATCH.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelCreate)</returns>
        public async System.Threading.Tasks.Task<Genie.Client.ApiResponse<ModelCreate>> ModelsCreateWithHttpInfoAsync(ModelCreate modelCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modelCreate' is set
            if (modelCreate == null)
                throw new Genie.Client.ApiException(400, "Missing required parameter 'modelCreate' when calling ModelsApi->ModelsCreate");


            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = modelCreate;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ModelCreate>("/api/models/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Remove a model. Be cautious, this is permanent!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <returns></returns>
        public void ModelsDestroy(Guid id)
        {
            ModelsDestroyWithHttpInfo(id);
        }

        /// <summary>
        ///  Remove a model. Be cautious, this is permanent!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Genie.Client.ApiResponse<Object> ModelsDestroyWithHttpInfo(Guid id)
        {
            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/models/{id}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Remove a model. Be cautious, this is permanent!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ModelsDestroyAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ModelsDestroyWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Remove a model. Be cautious, this is permanent!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Genie.Client.ApiResponse<Object>> ModelsDestroyWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/models/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a file.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ModelsGlbDestroy(Guid id)
        {
            ModelsGlbDestroyWithHttpInfo(id);
        }

        /// <summary>
        ///  Delete a file.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Genie.Client.ApiResponse<Object> ModelsGlbDestroyWithHttpInfo(Guid id)
        {
            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/models/{id}/glb/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsGlbDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a file.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ModelsGlbDestroyAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ModelsGlbDestroyWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete a file.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Genie.Client.ApiResponse<Object>> ModelsGlbDestroyWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/models/{id}/glb/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsGlbDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload a file. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FileUpload</returns>
        public FileUpload ModelsGlbUpdate(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream))
        {
            Genie.Client.ApiResponse<FileUpload> localVarResponse = ModelsGlbUpdateWithHttpInfo(contentDisposition, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload a file. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FileUpload</returns>
        public Genie.Client.ApiResponse<FileUpload> ModelsGlbUpdateWithHttpInfo(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream))
        {
            // verify the required parameter 'contentDisposition' is set
            if (contentDisposition == null)
                throw new Genie.Client.ApiException(400, "Missing required parameter 'contentDisposition' when calling ModelsApi->ModelsGlbUpdate");

            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Disposition", Genie.Client.ClientUtils.ParameterToString(contentDisposition)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<FileUpload>("/api/models/{id}/glb/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsGlbUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload a file. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileUpload</returns>
        public async System.Threading.Tasks.Task<FileUpload> ModelsGlbUpdateAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Client.ApiResponse<FileUpload> localVarResponse = await ModelsGlbUpdateWithHttpInfoAsync(contentDisposition, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload a file. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileUpload)</returns>
        public async System.Threading.Tasks.Task<Genie.Client.ApiResponse<FileUpload>> ModelsGlbUpdateWithHttpInfoAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentDisposition' is set
            if (contentDisposition == null)
                throw new Genie.Client.ApiException(400, "Missing required parameter 'contentDisposition' when calling ModelsApi->ModelsGlbUpdate");


            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Disposition", Genie.Client.ClientUtils.ParameterToString(contentDisposition)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<FileUpload>("/api/models/{id}/glb/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsGlbUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete an image.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ModelsImageDestroy(Guid id)
        {
            ModelsImageDestroyWithHttpInfo(id);
        }

        /// <summary>
        ///  Delete an image.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Genie.Client.ApiResponse<Object> ModelsImageDestroyWithHttpInfo(Guid id)
        {
            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/models/{id}/image/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsImageDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete an image.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ModelsImageDestroyAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ModelsImageDestroyWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete an image.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Genie.Client.ApiResponse<Object>> ModelsImageDestroyWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/models/{id}/image/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsImageDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload an image. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FileUpload</returns>
        public FileUpload ModelsImageUpdate(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream))
        {
            Genie.Client.ApiResponse<FileUpload> localVarResponse = ModelsImageUpdateWithHttpInfo(contentDisposition, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload an image. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FileUpload</returns>
        public Genie.Client.ApiResponse<FileUpload> ModelsImageUpdateWithHttpInfo(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream))
        {
            // verify the required parameter 'contentDisposition' is set
            if (contentDisposition == null)
                throw new Genie.Client.ApiException(400, "Missing required parameter 'contentDisposition' when calling ModelsApi->ModelsImageUpdate");

            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "image/_*"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Disposition", Genie.Client.ClientUtils.ParameterToString(contentDisposition)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<FileUpload>("/api/models/{id}/image/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsImageUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload an image. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileUpload</returns>
        public async System.Threading.Tasks.Task<FileUpload> ModelsImageUpdateAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Client.ApiResponse<FileUpload> localVarResponse = await ModelsImageUpdateWithHttpInfoAsync(contentDisposition, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload an image. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileUpload)</returns>
        public async System.Threading.Tasks.Task<Genie.Client.ApiResponse<FileUpload>> ModelsImageUpdateWithHttpInfoAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentDisposition' is set
            if (contentDisposition == null)
                throw new Genie.Client.ApiException(400, "Missing required parameter 'contentDisposition' when calling ModelsApi->ModelsImageUpdate");


            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "image/_*"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Disposition", Genie.Client.ClientUtils.ParameterToString(contentDisposition)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<FileUpload>("/api/models/{id}/image/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsImageUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lists all models for all projects the user is a member of. Can be filtered by &#x60;project&#x60;.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="status">DRAFT&#x3D;In development, READY&#x3D;Modelling complete, ONLINE&#x3D;Active use. (optional)</param>
        /// <returns>List&lt;Model&gt;</returns>
        public List<Model> ModelsList(Guid? project = default(Guid?), string status = default(string))
        {
            Genie.Client.ApiResponse<List<Model>> localVarResponse = ModelsListWithHttpInfo(project, status);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all models for all projects the user is a member of. Can be filtered by &#x60;project&#x60;.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="status">DRAFT&#x3D;In development, READY&#x3D;Modelling complete, ONLINE&#x3D;Active use. (optional)</param>
        /// <returns>ApiResponse of List&lt;Model&gt;</returns>
        public Genie.Client.ApiResponse<List<Model>> ModelsListWithHttpInfo(Guid? project = default(Guid?), string status = default(string))
        {
            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Genie.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Genie.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Model>>("/api/models/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lists all models for all projects the user is a member of. Can be filtered by &#x60;project&#x60;.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="status">DRAFT&#x3D;In development, READY&#x3D;Modelling complete, ONLINE&#x3D;Active use. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Model&gt;</returns>
        public async System.Threading.Tasks.Task<List<Model>> ModelsListAsync(Guid? project = default(Guid?), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Client.ApiResponse<List<Model>> localVarResponse = await ModelsListWithHttpInfoAsync(project, status, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all models for all projects the user is a member of. Can be filtered by &#x60;project&#x60;.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="status">DRAFT&#x3D;In development, READY&#x3D;Modelling complete, ONLINE&#x3D;Active use. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Model&gt;)</returns>
        public async System.Threading.Tasks.Task<Genie.Client.ApiResponse<List<Model>>> ModelsListWithHttpInfoAsync(Guid? project = default(Guid?), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Genie.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Genie.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Model>>("/api/models/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Change as subset of model details.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="patchedModelUpdate"> (optional)</param>
        /// <returns>ModelUpdate</returns>
        public ModelUpdate ModelsPartialUpdate(Guid id, PatchedModelUpdate patchedModelUpdate = default(PatchedModelUpdate))
        {
            Genie.Client.ApiResponse<ModelUpdate> localVarResponse = ModelsPartialUpdateWithHttpInfo(id, patchedModelUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Change as subset of model details.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="patchedModelUpdate"> (optional)</param>
        /// <returns>ApiResponse of ModelUpdate</returns>
        public Genie.Client.ApiResponse<ModelUpdate> ModelsPartialUpdateWithHttpInfo(Guid id, PatchedModelUpdate patchedModelUpdate = default(PatchedModelUpdate))
        {
            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchedModelUpdate;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ModelUpdate>("/api/models/{id}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsPartialUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Change as subset of model details.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="patchedModelUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelUpdate</returns>
        public async System.Threading.Tasks.Task<ModelUpdate> ModelsPartialUpdateAsync(Guid id, PatchedModelUpdate patchedModelUpdate = default(PatchedModelUpdate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Client.ApiResponse<ModelUpdate> localVarResponse = await ModelsPartialUpdateWithHttpInfoAsync(id, patchedModelUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Change as subset of model details.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="patchedModelUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelUpdate)</returns>
        public async System.Threading.Tasks.Task<Genie.Client.ApiResponse<ModelUpdate>> ModelsPartialUpdateWithHttpInfoAsync(Guid id, PatchedModelUpdate patchedModelUpdate = default(PatchedModelUpdate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchedModelUpdate;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<ModelUpdate>("/api/models/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsPartialUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Details of a single model.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <returns>Model</returns>
        public Model ModelsRetrieve(Guid id)
        {
            Genie.Client.ApiResponse<Model> localVarResponse = ModelsRetrieveWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Details of a single model.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <returns>ApiResponse of Model</returns>
        public Genie.Client.ApiResponse<Model> ModelsRetrieveWithHttpInfo(Guid id)
        {
            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Model>("/api/models/{id}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsRetrieve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Details of a single model.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Model</returns>
        public async System.Threading.Tasks.Task<Model> ModelsRetrieveAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Client.ApiResponse<Model> localVarResponse = await ModelsRetrieveWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Details of a single model.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Model)</returns>
        public async System.Threading.Tasks.Task<Genie.Client.ApiResponse<Model>> ModelsRetrieveWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Model>("/api/models/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsRetrieve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Change model details. Translated field are all optional expcet for &#x60;name_de&#x60;.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="modelUpdate"> (optional)</param>
        /// <returns>ModelUpdate</returns>
        public ModelUpdate ModelsUpdate(Guid id, ModelUpdate modelUpdate = default(ModelUpdate))
        {
            Genie.Client.ApiResponse<ModelUpdate> localVarResponse = ModelsUpdateWithHttpInfo(id, modelUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Change model details. Translated field are all optional expcet for &#x60;name_de&#x60;.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="modelUpdate"> (optional)</param>
        /// <returns>ApiResponse of ModelUpdate</returns>
        public Genie.Client.ApiResponse<ModelUpdate> ModelsUpdateWithHttpInfo(Guid id, ModelUpdate modelUpdate = default(ModelUpdate))
        {
            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = modelUpdate;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ModelUpdate>("/api/models/{id}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Change model details. Translated field are all optional expcet for &#x60;name_de&#x60;.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="modelUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelUpdate</returns>
        public async System.Threading.Tasks.Task<ModelUpdate> ModelsUpdateAsync(Guid id, ModelUpdate modelUpdate = default(ModelUpdate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Client.ApiResponse<ModelUpdate> localVarResponse = await ModelsUpdateWithHttpInfoAsync(id, modelUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Change model details. Translated field are all optional expcet for &#x60;name_de&#x60;.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this Model.</param>
        /// <param name="modelUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelUpdate)</returns>
        public async System.Threading.Tasks.Task<Genie.Client.ApiResponse<ModelUpdate>> ModelsUpdateWithHttpInfoAsync(Guid id, ModelUpdate modelUpdate = default(ModelUpdate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = modelUpdate;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ModelUpdate>("/api/models/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a file.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ModelsUsdzDestroy(Guid id)
        {
            ModelsUsdzDestroyWithHttpInfo(id);
        }

        /// <summary>
        ///  Delete a file.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Genie.Client.ApiResponse<Object> ModelsUsdzDestroyWithHttpInfo(Guid id)
        {
            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/models/{id}/usdz/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsUsdzDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a file.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ModelsUsdzDestroyAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ModelsUsdzDestroyWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete a file.
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Genie.Client.ApiResponse<Object>> ModelsUsdzDestroyWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/models/{id}/usdz/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsUsdzDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload a file. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FileUpload</returns>
        public FileUpload ModelsUsdzUpdate(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream))
        {
            Genie.Client.ApiResponse<FileUpload> localVarResponse = ModelsUsdzUpdateWithHttpInfo(contentDisposition, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload a file. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FileUpload</returns>
        public Genie.Client.ApiResponse<FileUpload> ModelsUsdzUpdateWithHttpInfo(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream))
        {
            // verify the required parameter 'contentDisposition' is set
            if (contentDisposition == null)
                throw new Genie.Client.ApiException(400, "Missing required parameter 'contentDisposition' when calling ModelsApi->ModelsUsdzUpdate");

            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Disposition", Genie.Client.ClientUtils.ParameterToString(contentDisposition)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<FileUpload>("/api/models/{id}/usdz/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsUsdzUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload a file. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileUpload</returns>
        public async System.Threading.Tasks.Task<FileUpload> ModelsUsdzUpdateAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Genie.Client.ApiResponse<FileUpload> localVarResponse = await ModelsUsdzUpdateWithHttpInfoAsync(contentDisposition, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload a file. Max size 30MB. Filename is required!
        /// </summary>
        /// <exception cref="Genie.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentDisposition">The original filename.</param>
        /// <param name="id">A UUID identifying this object.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileUpload)</returns>
        public async System.Threading.Tasks.Task<Genie.Client.ApiResponse<FileUpload>> ModelsUsdzUpdateWithHttpInfoAsync(string contentDisposition, Guid id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentDisposition' is set
            if (contentDisposition == null)
                throw new Genie.Client.ApiException(400, "Missing required parameter 'contentDisposition' when calling ModelsApi->ModelsUsdzUpdate");


            Genie.Client.RequestOptions localVarRequestOptions = new Genie.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Genie.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Genie.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Genie.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Disposition", Genie.Client.ClientUtils.ParameterToString(contentDisposition)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sessionid")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("sessionid", this.Configuration.GetApiKeyWithPrefix("sessionid")));
            }
            // authentication (jwtAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<FileUpload>("/api/models/{id}/usdz/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelsUsdzUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
