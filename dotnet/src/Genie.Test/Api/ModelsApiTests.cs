/*
 * Genie API
 *
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Genie.Client;
using Genie.Api;
// uncomment below to import models
//using Genie.Model;

namespace Genie.Test.Api
{
    /// <summary>
    ///  Class for testing ModelsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ModelsApiTests : IDisposable
    {
        private ModelsApi instance;

        public ModelsApiTests()
        {
            instance = new ModelsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ModelsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ModelsApi
            //Assert.IsType<ModelsApi>(instance);
        }

        /// <summary>
        /// Test ModelsCreate
        /// </summary>
        [Fact]
        public void ModelsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModelCreate modelCreate = null;
            //var response = instance.ModelsCreate(modelCreate);
            //Assert.IsType<ModelCreate>(response);
        }

        /// <summary>
        /// Test ModelsDestroy
        /// </summary>
        [Fact]
        public void ModelsDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.ModelsDestroy(id);
        }

        /// <summary>
        /// Test ModelsGlbDestroy
        /// </summary>
        [Fact]
        public void ModelsGlbDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.ModelsGlbDestroy(id);
        }

        /// <summary>
        /// Test ModelsGlbUpdate
        /// </summary>
        [Fact]
        public void ModelsGlbUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentDisposition = null;
            //Guid id = null;
            //System.IO.Stream body = null;
            //var response = instance.ModelsGlbUpdate(contentDisposition, id, body);
            //Assert.IsType<FileUpload>(response);
        }

        /// <summary>
        /// Test ModelsImageDestroy
        /// </summary>
        [Fact]
        public void ModelsImageDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.ModelsImageDestroy(id);
        }

        /// <summary>
        /// Test ModelsImageUpdate
        /// </summary>
        [Fact]
        public void ModelsImageUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentDisposition = null;
            //Guid id = null;
            //System.IO.Stream body = null;
            //var response = instance.ModelsImageUpdate(contentDisposition, id, body);
            //Assert.IsType<FileUpload>(response);
        }

        /// <summary>
        /// Test ModelsList
        /// </summary>
        [Fact]
        public void ModelsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? project = null;
            //string status = null;
            //var response = instance.ModelsList(project, status);
            //Assert.IsType<List<Model>>(response);
        }

        /// <summary>
        /// Test ModelsPartialUpdate
        /// </summary>
        [Fact]
        public void ModelsPartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //PatchedModelUpdate patchedModelUpdate = null;
            //var response = instance.ModelsPartialUpdate(id, patchedModelUpdate);
            //Assert.IsType<ModelUpdate>(response);
        }

        /// <summary>
        /// Test ModelsRetrieve
        /// </summary>
        [Fact]
        public void ModelsRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.ModelsRetrieve(id);
            //Assert.IsType<Model>(response);
        }

        /// <summary>
        /// Test ModelsUpdate
        /// </summary>
        [Fact]
        public void ModelsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ModelUpdate modelUpdate = null;
            //var response = instance.ModelsUpdate(id, modelUpdate);
            //Assert.IsType<ModelUpdate>(response);
        }

        /// <summary>
        /// Test ModelsUsdzDestroy
        /// </summary>
        [Fact]
        public void ModelsUsdzDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.ModelsUsdzDestroy(id);
        }

        /// <summary>
        /// Test ModelsUsdzUpdate
        /// </summary>
        [Fact]
        public void ModelsUsdzUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentDisposition = null;
            //Guid id = null;
            //System.IO.Stream body = null;
            //var response = instance.ModelsUsdzUpdate(contentDisposition, id, body);
            //Assert.IsType<FileUpload>(response);
        }
    }
}
