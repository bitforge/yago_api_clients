"""
    Genie API

    Augemented Reality Made Easy.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: hello@genie-ar.ch
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from genie.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from genie.exceptions import ApiAttributeError


def lazy_import():
    from genie.model.nested import Nested
    globals()['Nested'] = Nested


class StripeSubscription(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('id',): {
            'max_length': 255,
        },
        ('application_fee_percent',): {
            'regex': {
                'pattern': r'^\d{0,3}(?:\.\d{0,2})?$',  # noqa: E501
            },
        },
        ('days_until_due',): {
            'inclusive_maximum': 2147483647,
            'inclusive_minimum': -2147483648,
        },
        ('quantity',): {
            'inclusive_maximum': 2147483647,
            'inclusive_minimum': -2147483648,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'djstripe_id': (int,),  # noqa: E501
            'djstripe_created': (datetime,),  # noqa: E501
            'djstripe_updated': (datetime,),  # noqa: E501
            'id': (str,),  # noqa: E501
            'collection_method': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'current_period_end': (datetime,),  # noqa: E501
            'current_period_start': (datetime,),  # noqa: E501
            'status': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'djstripe_owner_account': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'customer': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'default_payment_method': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'default_source': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'pending_setup_intent': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'plan': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'schedule': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'default_tax_rates': ([Nested],),  # noqa: E501
            'livemode': (bool, none_type,),  # noqa: E501
            'created': (datetime, none_type,),  # noqa: E501
            'metadata': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'description': (str, none_type,),  # noqa: E501
            'application_fee_percent': (str, none_type,),  # noqa: E501
            'billing_cycle_anchor': (datetime, none_type,),  # noqa: E501
            'billing_thresholds': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'cancel_at': (datetime, none_type,),  # noqa: E501
            'cancel_at_period_end': (bool,),  # noqa: E501
            'canceled_at': (datetime, none_type,),  # noqa: E501
            'days_until_due': (int, none_type,),  # noqa: E501
            'discount': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'ended_at': (datetime, none_type,),  # noqa: E501
            'next_pending_invoice_item_invoice': (datetime, none_type,),  # noqa: E501
            'pending_invoice_item_interval': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'pending_update': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'quantity': (int, none_type,),  # noqa: E501
            'start_date': (datetime, none_type,),  # noqa: E501
            'trial_end': (datetime, none_type,),  # noqa: E501
            'trial_start': (datetime, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'djstripe_id': 'djstripe_id',  # noqa: E501
        'djstripe_created': 'djstripe_created',  # noqa: E501
        'djstripe_updated': 'djstripe_updated',  # noqa: E501
        'id': 'id',  # noqa: E501
        'collection_method': 'collection_method',  # noqa: E501
        'current_period_end': 'current_period_end',  # noqa: E501
        'current_period_start': 'current_period_start',  # noqa: E501
        'status': 'status',  # noqa: E501
        'djstripe_owner_account': 'djstripe_owner_account',  # noqa: E501
        'customer': 'customer',  # noqa: E501
        'default_payment_method': 'default_payment_method',  # noqa: E501
        'default_source': 'default_source',  # noqa: E501
        'pending_setup_intent': 'pending_setup_intent',  # noqa: E501
        'plan': 'plan',  # noqa: E501
        'schedule': 'schedule',  # noqa: E501
        'default_tax_rates': 'default_tax_rates',  # noqa: E501
        'livemode': 'livemode',  # noqa: E501
        'created': 'created',  # noqa: E501
        'metadata': 'metadata',  # noqa: E501
        'description': 'description',  # noqa: E501
        'application_fee_percent': 'application_fee_percent',  # noqa: E501
        'billing_cycle_anchor': 'billing_cycle_anchor',  # noqa: E501
        'billing_thresholds': 'billing_thresholds',  # noqa: E501
        'cancel_at': 'cancel_at',  # noqa: E501
        'cancel_at_period_end': 'cancel_at_period_end',  # noqa: E501
        'canceled_at': 'canceled_at',  # noqa: E501
        'days_until_due': 'days_until_due',  # noqa: E501
        'discount': 'discount',  # noqa: E501
        'ended_at': 'ended_at',  # noqa: E501
        'next_pending_invoice_item_invoice': 'next_pending_invoice_item_invoice',  # noqa: E501
        'pending_invoice_item_interval': 'pending_invoice_item_interval',  # noqa: E501
        'pending_update': 'pending_update',  # noqa: E501
        'quantity': 'quantity',  # noqa: E501
        'start_date': 'start_date',  # noqa: E501
        'trial_end': 'trial_end',  # noqa: E501
        'trial_start': 'trial_start',  # noqa: E501
    }

    read_only_vars = {
        'djstripe_id',  # noqa: E501
        'djstripe_created',  # noqa: E501
        'djstripe_updated',  # noqa: E501
        'djstripe_owner_account',  # noqa: E501
        'customer',  # noqa: E501
        'default_payment_method',  # noqa: E501
        'default_source',  # noqa: E501
        'pending_setup_intent',  # noqa: E501
        'plan',  # noqa: E501
        'schedule',  # noqa: E501
        'default_tax_rates',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, djstripe_id, djstripe_created, djstripe_updated, id, collection_method, current_period_end, current_period_start, status, djstripe_owner_account, customer, default_payment_method, default_source, pending_setup_intent, plan, schedule, default_tax_rates, *args, **kwargs):  # noqa: E501
        """StripeSubscription - a model defined in OpenAPI

        Args:
            djstripe_id (int):
            djstripe_created (datetime):
            djstripe_updated (datetime):
            id (str):
            collection_method (bool, date, datetime, dict, float, int, list, str, none_type): Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
            current_period_end (datetime): End of the current period for which the subscription has been invoiced. At the end of this period, a new invoice will be created.
            current_period_start (datetime): Start of the current period for which the subscription has been invoiced.
            status (bool, date, datetime, dict, float, int, list, str, none_type): The status of this subscription.
            djstripe_owner_account (bool, date, datetime, dict, float, int, list, str, none_type):
            customer (bool, date, datetime, dict, float, int, list, str, none_type):
            default_payment_method (bool, date, datetime, dict, float, int, list, str, none_type):
            default_source (bool, date, datetime, dict, float, int, list, str, none_type):
            pending_setup_intent (bool, date, datetime, dict, float, int, list, str, none_type):
            plan (bool, date, datetime, dict, float, int, list, str, none_type):
            schedule (bool, date, datetime, dict, float, int, list, str, none_type):
            default_tax_rates ([Nested]):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            livemode (bool, none_type): Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.. [optional]  # noqa: E501
            created (datetime, none_type): The datetime this object was created in stripe.. [optional]  # noqa: E501
            metadata ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.. [optional]  # noqa: E501
            description (str, none_type): A description of this object.. [optional]  # noqa: E501
            application_fee_percent (str, none_type): A positive decimal that represents the fee percentage of the subscription invoice amount that will be transferred to the application owner's Stripe account each billing period.. [optional]  # noqa: E501
            billing_cycle_anchor (datetime, none_type): Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.. [optional]  # noqa: E501
            billing_thresholds ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period.. [optional]  # noqa: E501
            cancel_at (datetime, none_type): A date in the future at which the subscription will automatically get canceled.. [optional]  # noqa: E501
            cancel_at_period_end (bool): If the subscription has been canceled with the ``at_period_end`` flag set to true, ``cancel_at_period_end`` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.. [optional]  # noqa: E501
            canceled_at (datetime, none_type): If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with ``cancel_at_period_end``, canceled_at will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.. [optional]  # noqa: E501
            days_until_due (int, none_type): Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `billing=charge_automatically`.. [optional]  # noqa: E501
            discount ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): [optional]  # noqa: E501
            ended_at (datetime, none_type): If the subscription has ended (either because it was canceled or because the customer was switched to a subscription to a new plan), the date the subscription ended.. [optional]  # noqa: E501
            next_pending_invoice_item_invoice (datetime, none_type): Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at pending_invoice_item_interval.. [optional]  # noqa: E501
            pending_invoice_item_interval ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling Create an invoice for the given subscription at the specified interval.. [optional]  # noqa: E501
            pending_update ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): If specified, pending updates that will be applied to the subscription once the latest_invoice has been paid.. [optional]  # noqa: E501
            quantity (int, none_type): The quantity applied to this subscription. This value will be `null` for multi-plan subscriptions. [optional]  # noqa: E501
            start_date (datetime, none_type): Date when the subscription was first created. The date might differ from the created date due to backdating.. [optional]  # noqa: E501
            trial_end (datetime, none_type): If the subscription has a trial, the end of that trial.. [optional]  # noqa: E501
            trial_start (datetime, none_type): If the subscription has a trial, the beginning of that trial.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.djstripe_id = djstripe_id
        self.djstripe_created = djstripe_created
        self.djstripe_updated = djstripe_updated
        self.id = id
        self.collection_method = collection_method
        self.current_period_end = current_period_end
        self.current_period_start = current_period_start
        self.status = status
        self.djstripe_owner_account = djstripe_owner_account
        self.customer = customer
        self.default_payment_method = default_payment_method
        self.default_source = default_source
        self.pending_setup_intent = pending_setup_intent
        self.plan = plan
        self.schedule = schedule
        self.default_tax_rates = default_tax_rates
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, id, collection_method, current_period_end, current_period_start, status, *args, **kwargs):  # noqa: E501
        """StripeSubscription - a model defined in OpenAPI

            id (str):
            collection_method (bool, date, datetime, dict, float, int, list, str, none_type): Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
            current_period_end (datetime): End of the current period for which the subscription has been invoiced. At the end of this period, a new invoice will be created.
            current_period_start (datetime): Start of the current period for which the subscription has been invoiced.
            status (bool, date, datetime, dict, float, int, list, str, none_type): The status of this subscription.
        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            livemode (bool, none_type): Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.. [optional]  # noqa: E501
            created (datetime, none_type): The datetime this object was created in stripe.. [optional]  # noqa: E501
            metadata ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.. [optional]  # noqa: E501
            description (str, none_type): A description of this object.. [optional]  # noqa: E501
            application_fee_percent (str, none_type): A positive decimal that represents the fee percentage of the subscription invoice amount that will be transferred to the application owner's Stripe account each billing period.. [optional]  # noqa: E501
            billing_cycle_anchor (datetime, none_type): Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.. [optional]  # noqa: E501
            billing_thresholds ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period.. [optional]  # noqa: E501
            cancel_at (datetime, none_type): A date in the future at which the subscription will automatically get canceled.. [optional]  # noqa: E501
            cancel_at_period_end (bool): If the subscription has been canceled with the ``at_period_end`` flag set to true, ``cancel_at_period_end`` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.. [optional]  # noqa: E501
            canceled_at (datetime, none_type): If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with ``cancel_at_period_end``, canceled_at will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.. [optional]  # noqa: E501
            days_until_due (int, none_type): Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `billing=charge_automatically`.. [optional]  # noqa: E501
            discount ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): [optional]  # noqa: E501
            ended_at (datetime, none_type): If the subscription has ended (either because it was canceled or because the customer was switched to a subscription to a new plan), the date the subscription ended.. [optional]  # noqa: E501
            next_pending_invoice_item_invoice (datetime, none_type): Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at pending_invoice_item_interval.. [optional]  # noqa: E501
            pending_invoice_item_interval ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling Create an invoice for the given subscription at the specified interval.. [optional]  # noqa: E501
            pending_update ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): If specified, pending updates that will be applied to the subscription once the latest_invoice has been paid.. [optional]  # noqa: E501
            quantity (int, none_type): The quantity applied to this subscription. This value will be `null` for multi-plan subscriptions. [optional]  # noqa: E501
            start_date (datetime, none_type): Date when the subscription was first created. The date might differ from the created date due to backdating.. [optional]  # noqa: E501
            trial_end (datetime, none_type): If the subscription has a trial, the end of that trial.. [optional]  # noqa: E501
            trial_start (datetime, none_type): If the subscription has a trial, the beginning of that trial.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.collection_method = collection_method
        self.current_period_end = current_period_end
        self.current_period_start = current_period_start
        self.status = status
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
