/* tslint:disable */
/* eslint-disable */
/**
 * Yago API
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OrderState } from './OrderState';
import { OrderStateFromJSON, OrderStateFromJSONTyped, OrderStateToJSON } from './OrderState';

/**
 *
 * @export
 * @interface Order
 */
export interface Order {
    /**
     *
     * @type {number}
     * @memberof Order
     */
    readonly id: number;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    project: string;
    /**
     *
     * @type {OrderState}
     * @memberof Order
     */
    readonly state: OrderState;
    /**
     * Estimation of order in CHF including taxes. Payment price for User before starting production.
     * @type {string}
     * @memberof Order
     */
    price?: string | null;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    readonly priceCurrency: string | null;
    /**
     *
     * @type {Date}
     * @memberof Order
     */
    readonly created: Date;
    /**
     *
     * @type {Date}
     * @memberof Order
     */
    readonly modified: Date;
    /**
     * Returns the number of Models this order has.
     * @type {number}
     * @memberof Order
     */
    readonly modelCount: number;
}

/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && 'id' in value;
    isInstance = isInstance && 'project' in value;
    isInstance = isInstance && 'state' in value;
    isInstance = isInstance && 'priceCurrency' in value;
    isInstance = isInstance && 'created' in value;
    isInstance = isInstance && 'modified' in value;
    isInstance = isInstance && 'modelCount' in value;

    return isInstance;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        id: json['id'],
        project: json['project'],
        state: OrderStateFromJSON(json['state']),
        price: !exists(json, 'price') ? undefined : json['price'],
        priceCurrency: json['price_currency'],
        created: new Date(json['created']),
        modified: new Date(json['modified']),
        modelCount: json['model_count'],
    };
}

export function OrderToJSON(value?: Order | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        project: value.project,
        price: value.price,
    };
}
