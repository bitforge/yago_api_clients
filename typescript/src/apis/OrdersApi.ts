/* tslint:disable */
/* eslint-disable */
/**
 * Yago API
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AvailableState,
    AvailableStateFromJSON,
    AvailableStateToJSON,
    ErrorDescription,
    ErrorDescriptionFromJSON,
    ErrorDescriptionToJSON,
    FileUploaded,
    FileUploadedFromJSON,
    FileUploadedToJSON,
    Order,
    OrderFromJSON,
    OrderToJSON,
    OrderComment,
    OrderCommentFromJSON,
    OrderCommentToJSON,
    OrderCommentCreate,
    OrderCommentCreateFromJSON,
    OrderCommentCreateToJSON,
    OrderCreate,
    OrderCreateFromJSON,
    OrderCreateToJSON,
    OrderDetail,
    OrderDetailFromJSON,
    OrderDetailToJSON,
    OrderModel,
    OrderModelFromJSON,
    OrderModelToJSON,
    OrderModelComment,
    OrderModelCommentFromJSON,
    OrderModelCommentToJSON,
    OrderModelCommentCreate,
    OrderModelCommentCreateFromJSON,
    OrderModelCommentCreateToJSON,
    OrderModelCreate,
    OrderModelCreateFromJSON,
    OrderModelCreateToJSON,
    OrderModelDetail,
    OrderModelDetailFromJSON,
    OrderModelDetailToJSON,
    OrderModelFile,
    OrderModelFileFromJSON,
    OrderModelFileToJSON,
    OrderUpdate,
    OrderUpdateFromJSON,
    OrderUpdateToJSON,
    StateChanged,
    StateChangedFromJSON,
    StateChangedToJSON,
} from '../models';

export interface OrdersCommentsCreateRequest {
    orderId: number;
    orderCommentCreate: OrderCommentCreate;
}

export interface OrdersCommentsListRequest {
    orderId: number;
}

export interface OrdersCreateRequest {
    orderCreate: OrderCreate;
}

export interface OrdersDestroyRequest {
    id: number;
}

export interface OrdersListRequest {
    project?: string;
}

export interface OrdersModelsCommentsCreateRequest {
    orderId: number;
    id: number;
    orderModelCommentCreate: OrderModelCommentCreate;
}

export interface OrdersModelsCommentsListRequest {
    orderId: number;
    id: number;
}

export interface OrdersModelsCreateRequest {
    orderId: number;
    orderModelCreate: OrderModelCreate;
}

export interface OrdersModelsDestroyRequest {
    orderId: number;
    id: number;
}

export interface OrdersModelsFilesDestroyRequest {
    orderId: number;
    id: number;
    fileId: string;
}

export interface OrdersModelsFilesListRequest {
    orderId: number;
    id: number;
}

export interface OrdersModelsFilesUpdateRequest {
    orderId: number;
    contentDisposition: string;
    id: number;
    body?: Blob;
}

export interface OrdersModelsListRequest {
    orderId: number;
}

export interface OrdersModelsRetrieveRequest {
    orderId: number;
    id: number;
}

export interface OrdersModelsSubmitToFinishedPartialUpdateRequest {
    orderId: number;
    id: number;
}

export interface OrdersModelsSubmitToReviewPartialUpdateRequest {
    orderId: number;
    id: number;
}

export interface OrdersModelsSubmitToReworkPartialUpdateRequest {
    orderId: number;
    id: number;
}

export interface OrdersModelsTransitionsListRequest {
    orderId: number;
    id: number;
}

export interface OrdersModelsUpdateRequest {
    orderId: number;
    id: number;
    orderModel: OrderModel;
}

export interface OrdersRetrieveRequest {
    id: number;
}

export interface OrdersSubmitToEstimationPartialUpdateRequest {
    orderId: number;
}

export interface OrdersSubmitToFinishedPartialUpdateRequest {
    orderId: number;
}

export interface OrdersSubmitToPaymentPartialUpdateRequest {
    orderId: number;
}

export interface OrdersSubmitToProgressPartialUpdateRequest {
    orderId: number;
}

export interface OrdersSubmitToReviewPartialUpdateRequest {
    orderId: number;
}

export interface OrdersTransitionsListRequest {
    orderId: number;
}

export interface OrdersUpdateRequest {
    id: number;
    orderUpdate: OrderUpdate;
}

/**
 * 
 */
export class OrdersApi extends runtime.BaseAPI {

    /**
     * Add a new comment to order.
     */
    async ordersCommentsCreateRaw(requestParameters: OrdersCommentsCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OrderCommentCreate>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersCommentsCreate.');
        }

        if (requestParameters.orderCommentCreate === null || requestParameters.orderCommentCreate === undefined) {
            throw new runtime.RequiredError('orderCommentCreate','Required parameter requestParameters.orderCommentCreate was null or undefined when calling ordersCommentsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/comments/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCommentCreateToJSON(requestParameters.orderCommentCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderCommentCreateFromJSON(jsonValue));
    }

    /**
     * Add a new comment to order.
     */
    async ordersCommentsCreate(requestParameters: OrdersCommentsCreateRequest, initOverrides?: RequestInit): Promise<OrderCommentCreate> {
        const response = await this.ordersCommentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all comments of order.
     */
    async ordersCommentsListRaw(requestParameters: OrdersCommentsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OrderComment>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersCommentsList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/comments/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderCommentFromJSON));
    }

    /**
     * List all comments of order.
     */
    async ordersCommentsList(requestParameters: OrdersCommentsListRequest, initOverrides?: RequestInit): Promise<Array<OrderComment>> {
        const response = await this.ordersCommentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new order.
     */
    async ordersCreateRaw(requestParameters: OrdersCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderCreate === null || requestParameters.orderCreate === undefined) {
            throw new runtime.RequiredError('orderCreate','Required parameter requestParameters.orderCreate was null or undefined when calling ordersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCreateToJSON(requestParameters.orderCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Add a new order.
     */
    async ordersCreate(requestParameters: OrdersCreateRequest, initOverrides?: RequestInit): Promise<Order> {
        const response = await this.ordersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete order.
     */
    async ordersDestroyRaw(requestParameters: OrdersDestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete order.
     */
    async ordersDestroy(requestParameters: OrdersDestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.ordersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Lists all orders of customer.
     */
    async ordersListRaw(requestParameters: OrdersListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Order>>> {
        const queryParameters: any = {};

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderFromJSON));
    }

    /**
     * Lists all orders of customer.
     */
    async ordersList(requestParameters: OrdersListRequest = {}, initOverrides?: RequestInit): Promise<Array<Order>> {
        const response = await this.ordersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new comment to order.
     */
    async ordersModelsCommentsCreateRaw(requestParameters: OrdersModelsCommentsCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OrderModelCommentCreate>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersModelsCommentsCreate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersModelsCommentsCreate.');
        }

        if (requestParameters.orderModelCommentCreate === null || requestParameters.orderModelCommentCreate === undefined) {
            throw new runtime.RequiredError('orderModelCommentCreate','Required parameter requestParameters.orderModelCommentCreate was null or undefined when calling ordersModelsCommentsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/models/{id}/comments/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderModelCommentCreateToJSON(requestParameters.orderModelCommentCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderModelCommentCreateFromJSON(jsonValue));
    }

    /**
     * Add a new comment to order.
     */
    async ordersModelsCommentsCreate(requestParameters: OrdersModelsCommentsCreateRequest, initOverrides?: RequestInit): Promise<OrderModelCommentCreate> {
        const response = await this.ordersModelsCommentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all comments of model.
     */
    async ordersModelsCommentsListRaw(requestParameters: OrdersModelsCommentsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OrderModelComment>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersModelsCommentsList.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersModelsCommentsList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/models/{id}/comments/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderModelCommentFromJSON));
    }

    /**
     * List all comments of model.
     */
    async ordersModelsCommentsList(requestParameters: OrdersModelsCommentsListRequest, initOverrides?: RequestInit): Promise<Array<OrderModelComment>> {
        const response = await this.ordersModelsCommentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new model.
     */
    async ordersModelsCreateRaw(requestParameters: OrdersModelsCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OrderModel>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersModelsCreate.');
        }

        if (requestParameters.orderModelCreate === null || requestParameters.orderModelCreate === undefined) {
            throw new runtime.RequiredError('orderModelCreate','Required parameter requestParameters.orderModelCreate was null or undefined when calling ordersModelsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/models/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderModelCreateToJSON(requestParameters.orderModelCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderModelFromJSON(jsonValue));
    }

    /**
     * Add a new model.
     */
    async ordersModelsCreate(requestParameters: OrdersModelsCreateRequest, initOverrides?: RequestInit): Promise<OrderModel> {
        const response = await this.ordersModelsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete model.
     */
    async ordersModelsDestroyRaw(requestParameters: OrdersModelsDestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersModelsDestroy.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersModelsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/models/{id}/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete model.
     */
    async ordersModelsDestroy(requestParameters: OrdersModelsDestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.ordersModelsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Delete file.
     */
    async ordersModelsFilesDestroyRaw(requestParameters: OrdersModelsFilesDestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersModelsFilesDestroy.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersModelsFilesDestroy.');
        }

        if (requestParameters.fileId === null || requestParameters.fileId === undefined) {
            throw new runtime.RequiredError('fileId','Required parameter requestParameters.fileId was null or undefined when calling ordersModelsFilesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/models/{id}/files/{file_id}/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"file_id"}}`, encodeURIComponent(String(requestParameters.fileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete file.
     */
    async ordersModelsFilesDestroy(requestParameters: OrdersModelsFilesDestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.ordersModelsFilesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Lists all files of model.
     */
    async ordersModelsFilesListRaw(requestParameters: OrdersModelsFilesListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OrderModelFile>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersModelsFilesList.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersModelsFilesList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/models/{id}/files/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderModelFileFromJSON));
    }

    /**
     * Lists all files of model.
     */
    async ordersModelsFilesList(requestParameters: OrdersModelsFilesListRequest, initOverrides?: RequestInit): Promise<Array<OrderModelFile>> {
        const response = await this.ordersModelsFilesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload a file. Max size 30MB. Filename is required!
     */
    async ordersModelsFilesUpdateRaw(requestParameters: OrdersModelsFilesUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FileUploaded>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersModelsFilesUpdate.');
        }

        if (requestParameters.contentDisposition === null || requestParameters.contentDisposition === undefined) {
            throw new runtime.RequiredError('contentDisposition','Required parameter requestParameters.contentDisposition was null or undefined when calling ordersModelsFilesUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersModelsFilesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/octet-stream';

        if (requestParameters.contentDisposition !== undefined && requestParameters.contentDisposition !== null) {
            headerParameters['Content-Disposition'] = String(requestParameters.contentDisposition);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/models/{id}/files/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileUploadedFromJSON(jsonValue));
    }

    /**
     * Upload a file. Max size 30MB. Filename is required!
     */
    async ordersModelsFilesUpdate(requestParameters: OrdersModelsFilesUpdateRequest, initOverrides?: RequestInit): Promise<FileUploaded> {
        const response = await this.ordersModelsFilesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all models of order.
     */
    async ordersModelsListRaw(requestParameters: OrdersModelsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OrderModel>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersModelsList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/models/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderModelFromJSON));
    }

    /**
     * Lists all models of order.
     */
    async ordersModelsList(requestParameters: OrdersModelsListRequest, initOverrides?: RequestInit): Promise<Array<OrderModel>> {
        const response = await this.ordersModelsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * `ModelOrder` CRUD Viewset.
     */
    async ordersModelsRetrieveRaw(requestParameters: OrdersModelsRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OrderModelDetail>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersModelsRetrieve.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersModelsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/models/{id}/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderModelDetailFromJSON(jsonValue));
    }

    /**
     * `ModelOrder` CRUD Viewset.
     */
    async ordersModelsRetrieve(requestParameters: OrdersModelsRetrieveRequest, initOverrides?: RequestInit): Promise<OrderModelDetail> {
        const response = await this.ordersModelsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Model was accepted by customer and can be added to project.
     */
    async ordersModelsSubmitToFinishedPartialUpdateRaw(requestParameters: OrdersModelsSubmitToFinishedPartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StateChanged>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersModelsSubmitToFinishedPartialUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersModelsSubmitToFinishedPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/models/{id}/submit_to_finished/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateChangedFromJSON(jsonValue));
    }

    /**
     * Model was accepted by customer and can be added to project.
     */
    async ordersModelsSubmitToFinishedPartialUpdate(requestParameters: OrdersModelsSubmitToFinishedPartialUpdateRequest, initOverrides?: RequestInit): Promise<StateChanged> {
        const response = await this.ordersModelsSubmitToFinishedPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Model is ready to be reviewed by customer.
     */
    async ordersModelsSubmitToReviewPartialUpdateRaw(requestParameters: OrdersModelsSubmitToReviewPartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StateChanged>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersModelsSubmitToReviewPartialUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersModelsSubmitToReviewPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/models/{id}/submit_to_review/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateChangedFromJSON(jsonValue));
    }

    /**
     * Model is ready to be reviewed by customer.
     */
    async ordersModelsSubmitToReviewPartialUpdate(requestParameters: OrdersModelsSubmitToReviewPartialUpdateRequest, initOverrides?: RequestInit): Promise<StateChanged> {
        const response = await this.ordersModelsSubmitToReviewPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request rework of model, as specified in comments. Can only happen once.
     */
    async ordersModelsSubmitToReworkPartialUpdateRaw(requestParameters: OrdersModelsSubmitToReworkPartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StateChanged>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersModelsSubmitToReworkPartialUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersModelsSubmitToReworkPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/models/{id}/submit_to_rework/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateChangedFromJSON(jsonValue));
    }

    /**
     * Request rework of model, as specified in comments. Can only happen once.
     */
    async ordersModelsSubmitToReworkPartialUpdate(requestParameters: OrdersModelsSubmitToReworkPartialUpdateRequest, initOverrides?: RequestInit): Promise<StateChanged> {
        const response = await this.ordersModelsSubmitToReworkPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists available transitions of order model for current user.
     */
    async ordersModelsTransitionsListRaw(requestParameters: OrdersModelsTransitionsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AvailableState>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersModelsTransitionsList.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersModelsTransitionsList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/models/{id}/transitions/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AvailableStateFromJSON));
    }

    /**
     * Lists available transitions of order model for current user.
     */
    async ordersModelsTransitionsList(requestParameters: OrdersModelsTransitionsListRequest, initOverrides?: RequestInit): Promise<Array<AvailableState>> {
        const response = await this.ordersModelsTransitionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change model.
     */
    async ordersModelsUpdateRaw(requestParameters: OrdersModelsUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OrderModel>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersModelsUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersModelsUpdate.');
        }

        if (requestParameters.orderModel === null || requestParameters.orderModel === undefined) {
            throw new runtime.RequiredError('orderModel','Required parameter requestParameters.orderModel was null or undefined when calling ordersModelsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/models/{id}/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderModelToJSON(requestParameters.orderModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderModelFromJSON(jsonValue));
    }

    /**
     * Change model.
     */
    async ordersModelsUpdate(requestParameters: OrdersModelsUpdateRequest, initOverrides?: RequestInit): Promise<OrderModel> {
        const response = await this.ordersModelsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Details of a single order.
     */
    async ordersRetrieveRaw(requestParameters: OrdersRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OrderDetail>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDetailFromJSON(jsonValue));
    }

    /**
     * Details of a single order.
     */
    async ordersRetrieve(requestParameters: OrdersRetrieveRequest, initOverrides?: RequestInit): Promise<OrderDetail> {
        const response = await this.ordersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send order to estimation after all models have been added and specified.
     */
    async ordersSubmitToEstimationPartialUpdateRaw(requestParameters: OrdersSubmitToEstimationPartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StateChanged>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersSubmitToEstimationPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/submit_to_estimation/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateChangedFromJSON(jsonValue));
    }

    /**
     * Send order to estimation after all models have been added and specified.
     */
    async ordersSubmitToEstimationPartialUpdate(requestParameters: OrdersSubmitToEstimationPartialUpdateRequest, initOverrides?: RequestInit): Promise<StateChanged> {
        const response = await this.ordersSubmitToEstimationPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * All models are reviewed & accepted by customer, order is complete.
     */
    async ordersSubmitToFinishedPartialUpdateRaw(requestParameters: OrdersSubmitToFinishedPartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StateChanged>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersSubmitToFinishedPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/submit_to_finished/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateChangedFromJSON(jsonValue));
    }

    /**
     * All models are reviewed & accepted by customer, order is complete.
     */
    async ordersSubmitToFinishedPartialUpdate(requestParameters: OrdersSubmitToFinishedPartialUpdateRequest, initOverrides?: RequestInit): Promise<StateChanged> {
        const response = await this.ordersSubmitToFinishedPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Models have been estimated and and payment price for customer is defined.
     */
    async ordersSubmitToPaymentPartialUpdateRaw(requestParameters: OrdersSubmitToPaymentPartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StateChanged>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersSubmitToPaymentPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/submit_to_payment/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateChangedFromJSON(jsonValue));
    }

    /**
     * Models have been estimated and and payment price for customer is defined.
     */
    async ordersSubmitToPaymentPartialUpdate(requestParameters: OrdersSubmitToPaymentPartialUpdateRequest, initOverrides?: RequestInit): Promise<StateChanged> {
        const response = await this.ordersSubmitToPaymentPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Customer has payed estimated amount and modelling can begin.
     */
    async ordersSubmitToProgressPartialUpdateRaw(requestParameters: OrdersSubmitToProgressPartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StateChanged>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersSubmitToProgressPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/submit_to_progress/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateChangedFromJSON(jsonValue));
    }

    /**
     * Customer has payed estimated amount and modelling can begin.
     */
    async ordersSubmitToProgressPartialUpdate(requestParameters: OrdersSubmitToProgressPartialUpdateRequest, initOverrides?: RequestInit): Promise<StateChanged> {
        const response = await this.ordersSubmitToProgressPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * All models are uploaded and ready, customer may begin with review.
     */
    async ordersSubmitToReviewPartialUpdateRaw(requestParameters: OrdersSubmitToReviewPartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StateChanged>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersSubmitToReviewPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/submit_to_review/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateChangedFromJSON(jsonValue));
    }

    /**
     * All models are uploaded and ready, customer may begin with review.
     */
    async ordersSubmitToReviewPartialUpdate(requestParameters: OrdersSubmitToReviewPartialUpdateRequest, initOverrides?: RequestInit): Promise<StateChanged> {
        const response = await this.ordersSubmitToReviewPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists available transitions of order for current user.
     */
    async ordersTransitionsListRaw(requestParameters: OrdersTransitionsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AvailableState>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling ordersTransitionsList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{order_id}/transitions/`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AvailableStateFromJSON));
    }

    /**
     * Lists available transitions of order for current user.
     */
    async ordersTransitionsList(requestParameters: OrdersTransitionsListRequest, initOverrides?: RequestInit): Promise<Array<AvailableState>> {
        const response = await this.ordersTransitionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update order price estimation.
     */
    async ordersUpdateRaw(requestParameters: OrdersUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OrderUpdate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersUpdate.');
        }

        if (requestParameters.orderUpdate === null || requestParameters.orderUpdate === undefined) {
            throw new runtime.RequiredError('orderUpdate','Required parameter requestParameters.orderUpdate was null or undefined when calling ordersUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/orders/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderUpdateToJSON(requestParameters.orderUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderUpdateFromJSON(jsonValue));
    }

    /**
     * Update order price estimation.
     */
    async ordersUpdate(requestParameters: OrdersUpdateRequest, initOverrides?: RequestInit): Promise<OrderUpdate> {
        const response = await this.ordersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
