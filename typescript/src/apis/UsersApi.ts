/* tslint:disable */
/* eslint-disable */
/**
 * Yago API
 * Augemented Reality Made Easy.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@genie-ar.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { User } from '../models';
import { UserFromJSON, UserToJSON } from '../models';

export interface UsersListRequest {
    projects?: Array<string>;
}

export interface UsersMeUpdateRequest {
    user?: User;
}

export interface UsersRetrieveRequest {
    id: string;
}

/**
 *
 */
export class UsersApi extends runtime.BaseAPI {
    /**
     * Lists all users that are members in the same projects.
     */
    async usersListRaw(
        requestParameters: UsersListRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        if (requestParameters.projects) {
            queryParameters['projects'] = requestParameters.projects;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwtAuth', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/users/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(UserFromJSON));
    }

    /**
     * Lists all users that are members in the same projects.
     */
    async usersList(
        requestParameters: UsersListRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Array<User>> {
        const response = await this.usersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get or update current user details.
     */
    async usersMeRetrieveRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwtAuth', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/users/me/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, jsonValue => UserFromJSON(jsonValue));
    }

    /**
     * Get or update current user details.
     */
    async usersMeRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.usersMeRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get or update current user details.
     */
    async usersMeUpdateRaw(
        requestParameters: UsersMeUpdateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwtAuth', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/users/me/`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: UserToJSON(requestParameters.user),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, jsonValue => UserFromJSON(jsonValue));
    }

    /**
     * Get or update current user details.
     */
    async usersMeUpdate(
        requestParameters: UsersMeUpdateRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<User> {
        const response = await this.usersMeUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Details of a single user.
     */
    async usersRetrieveRaw(
        requestParameters: UsersRetrieveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter requestParameters.id was null or undefined when calling usersRetrieve.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwtAuth', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/users/{id}/`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, jsonValue => UserFromJSON(jsonValue));
    }

    /**
     * Details of a single user.
     */
    async usersRetrieve(
        requestParameters: UsersRetrieveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<User> {
        const response = await this.usersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
